code,
name_en,
ST_AsText(area_geometry) AS wkt_geom
FROM
refs_gis.areas
WHERE
code IN ('", paste(LIST_NON_STANDARD_AREAS, collapse = "', '"), "')"
))
SF_NON_STANDARD_AREAS_SF = st_as_sf(SF_NON_STANDARD_AREAS, wkt = "wkt_geom", crs = st_crs(4326))
plot(SF_NON_STANDARD_AREAS_SF)
# Irregular grids
IRREGULAR_GRIDS = unique(FL_STD_DATA_SPECIES_FOR_METADATA[AREA_TYPE_CODE %in% c("IRREGAREA", "GRID10x20"), .(AREA_TYPE_CODE, FISHING_GROUND_CODE, DESCRIPTION_EN, DESCRIPTION_FR)])
IRREGULAR_GRIDS
# Libraries
library(this.path)
# Set the Working Directory
setwd(here())
# Select the species
CODE_SPECIES_SELECTED = "BET"
# Select the URL for the document on conversion factors and morphometric relationships
if(CODE_SPECIES_SELECTED %in% c("BET", "SKJ", "YFT")){
TITLE_CONVERSION_DOCUMENT = "IOTC-2023-WPTT25(AS)-DATA13"
URL_CONVERSION_DOCUMENT = "https://www.iotc.org/WPTT/25/Data/13-Equations"}
if(CODE_SPECIES_SELECTED %in% c("BLT", "FRI", "KAW", "LOT", "COM", "GUT"))
{
TITLE_CONVERSION_DOCUMENT = "IOTC-2022-WPNT12-DATA11"
URL_CONVERSION_DOCUMENT = "https://www.iotc.org/WPNT/12/Data/11-Equations"
}
if(CODE_SPECIES_SELECTED %in% c("BLM", "BUM", "MLS", "SFA", "SWO"))
{
TITLE_CONVERSION_DOCUMENT = "IOTC-2022-WPB20-DATA11"
URL_CONVERSION_DOCUMENT = "https://www.iotc.org/WPB/20/Data/11-Equations"
}
if(CODE_SPECIES_SELECTED %in% c("ALB"))
{
TITLE_CONVERSION_DOCUMENT = "IOTC-2025-WPTmT09(DP)-DATA11"
URL_CONVERSION_DOCUMENT = "https://www.iotc.org/WPTmT/09DP/Data/11-Equations"
}
# Source the R codes
setwd("initialisation")
# Map legacy IOTDB codes to new codes
LEGACY_NEW_IRREGULAR_AREAS_MAPPING = fread("../inputs/mappings/MAPPING_SF_IRREGULAR_AREAS_IOTDB_MASTER.csv", colClasses = c("character", "character"))
setwd("C:/Users/echassot/Desktop/repositories/data-processing/iotc-sf-data-processing/initialisation")
# Map legacy IOTDB codes to new codes
LEGACY_NEW_IRREGULAR_AREAS_MAPPING = fread("../inputs/mappings/MAPPING_SF_IRREGULAR_AREAS_IOTDB_MASTER.csv", colClasses = c("character", "character"))
# Extract the raw size data
SF_RAW_DATA_SPECIES = SF_raw(species_code = CODE_SPECIES_SELECTED)
rm(list = ls())
# To avoid switch to scientific notation
options(scipen = 9999)
# Load libraries
source("90_LIBS.R")
source("91_LIBS_EXTERNAL.R")
source("94_QUALITY_SCORING_KEY_CHART.R")
# Define species of interest
CODE_SPECIES_SELECTED = 'BET'
# Define connection to postgres version of the code list database
C_REFERENCE_DATA =
DBI::dbConnect(drv = RPostgres::Postgres(),
host = Sys.getenv("IOTC_REFERENCE_DATA_DB_SERVER"),
dbname = 'IOTC_ReferenceData_2025_07_23',
port = 5432,
user = Sys.getenv("IOTC_REFERENCE_DATA_DB_USER"),
password = Sys.getenv("IOTC_REFERENCE_DATA_DB_PWD")
)
# Map legacy IOTDB codes to new codes
LEGACY_NEW_IRREGULAR_AREAS_MAPPING = fread("../inputs/mappings/MAPPING_SF_IRREGULAR_AREAS_IOTDB_MASTER.csv", colClasses = c("character", "character"))
# Extract the raw size data
SF_RAW_DATA_SPECIES = SF_raw(species_code = CODE_SPECIES_SELECTED)
SF_RAW_DATA_SPECIES[SPECIES_CODE %in% c("BET", "YFT") & MEASURE_TYPE_CODE == "GIL"]
SF_RAW_DATA_SPECIES[SPECIES_CODE %in% c("BET", "YFT") & FLEET_CODE == "AUS" & !GEAR_CODE %in% c("PS"), .N, .(GEAR_CODE)]
SF_RAW_DATA_SPECIES[SPECIES_CODE %in% c("BET", "YFT") & FLEET_CODE == "AUS" & !GEAR_CODE %in% c("PS"), .N, .(GEAR_CODE, MEASURE_TYPE_CODE)]
SF_RAW_DATA_SPECIES = SF_RAW_DATA_SPECIES[(FLEET_CODE == "EUESP" & is.na(GEAR_CODE))]
SF_RAW_DATA_SPECIES
# Extract the raw size data
SF_RAW_DATA_SPECIES = SF_raw(species_code = CODE_SPECIES_SELECTED)
gc()
gc()
SF_RAW_DATA_SPECIES[FLEET_CODE == "SYC" & GEAR_CODE %in% c("LLCO", "ELL", "LL", "FLL"), .N, keyby = .(YEAR, MEASURE_TYPE_CODE)]
SF_RAW_DATA_SPECIES[FLEET_CODE == "SYC" & GEAR_CODE == "PS", .N, .(SPECIES_CODE, MEASURE_TYPE_CODE)]
SF_RAW_DATA_SPECIES[FLEET_CODE == "SYC" & GEAR_CODE == "PS", .N, .(YEAR, SPECIES_CODE, MEASURE_TYPE_CODE)]
SF_RAW_DATA_SPECIES[FLEET_CODE == "SYC" & GEAR_CODE == "PS", .N, keyby = .(YEAR, SPECIES_CODE, MEASURE_TYPE_CODE)]
# Temp fix for tunas caught in Seychelles
SF_RAW_DATA_SPECIES[FLEET_CODE == "SYC" & GEAR_CODE == "PS" & MEASURE_TYPE_CODE == "FLUT", `:=` (MEASURE_TYPE_CODE = "FL", MEASURE_TYPE = "Fork length (lower jaw fork length for BIL)")]
SF_RAW_DATA_SPECIES[FLEET_CODE == "SYC" & GEAR_CODE == "PS", .N, keyby = .(YEAR, SPECIES_CODE, MEASURE_TYPE_CODE)]
# Save legacy fishing ground
setnames(SF_RAW_DATA_SPECIES, old = "FISHING_GROUND_CODE", new = "LEGACY_FISHING_GROUND_CODE")
# Update fishing ground codes for non-regular areas (from IOTCStatistics to IOTC_Master)
SF_RAW_DATA_SPECIES = merge(SF_RAW_DATA_SPECIES, LEGACY_NEW_IRREGULAR_AREAS_MAPPING, by.x = "LEGACY_FISHING_GROUND_CODE", by.y = "LEGACY_FISHING_GROUND_CODE", all.x = TRUE)
# Keep regular fishing grounds
SF_RAW_DATA_SPECIES[substring(LEGACY_FISHING_GROUND_CODE, 1, 1) %in% c("5", "6") & is.na(FISHING_GROUND_CODE), FISHING_GROUND_CODE := LEGACY_FISHING_GROUND_CODE]
SF_RAW_DATA_SPECIES[is.na(FISHING_GROUND_CODE)]
# Remove legacy fishing grounds
SF_RAW_DATA_SPECIES[, LEGACY_FISHING_GROUND_CODE := NULL]
# List of non standard areas in the raw SF dataset
LIST_NON_STANDARD_AREAS = sort(unique(SF_RAW_DATA_SPECIES[!substring(FISHING_GROUND_CODE, 1, 1) %in% c("5", "6"), FISHING_GROUND_CODE]))
LIST_NON_STANDARD_AREAS
source("03_SF_DATA_PROCESSING.R")
CL_SIZE_REC_TABLE
l_info("Extract code lists...")
## Recommended Size Measurements
#CL_SIZE_REC_TABLE = fread(input = "https://data.iotc.org/reference/latest/domain/biology/codelists/RECOMMENDED_MEASUREMENTS_1.0.0.csv")[SPECIES_CODE == CODE_SPECIES_SELECTED]
CL_SIZE_REC_TABLE = query(C_REFERENCE_DATA, paste0("SELECT * FROM refs_biology.recommended_measurements WHERE species_code = \'", CODE_SPECIES_SELECTED, "\';"))  %>% {setnames(., new = toupper(names(.))); .}
CL_SIZE_REC = CL_SIZE_REC_TABLE[, .(`Type of measurement code` = TYPE_OF_MEASUREMENT_CODE, `Measurement code` = MEASUREMENT_CODE, `Default measurement interval` = DEFAULT_MEASUREMENT_INTERVAL, `Maximum measurement interval` = MAX_MEASUREMENT_INTERVAL, `Minimum size` = MIN_MEASUREMENT, `Maximum size` = MAX_MEASUREMENT)]
# Add measurement unit
CL_SIZE_REC[, `Measurement unit` := "cm"]
setcolorder(CL_SIZE_REC, neworder = c(1, 2, 7, 3, 4, 5, 6))
CL_SIZE_REC = data.frame(as.data.table(t(CL_SIZE_REC), keep.rownames = TRUE))
names(CL_SIZE_REC) = c("", "")
# Full code lists
CL_SPECIES = query(C_REFERENCE_DATA, query = paste0("SELECT CODE AS SPECIES_CODE, NAME_EN AS SPECIES FROM refs_biology.SPECIES WHERE CODE = \'", CODE_SPECIES_SELECTED, "\';")) %>% {setnames(., new = toupper(names(.))); .}
CL_FLEETS = query(C_REFERENCE_DATA, query = "SELECT DISTINCT FLEET_CODE, NAME_EN, NAME_FR FROM refs_legacy.FLEETS;") %>% {setnames(., new = toupper(names(.))); .}
CL_FISHING_GROUNDS = query(C_REFERENCE_DATA, query = "SELECT CODE AS FISHING_GROUND_CODE, LABEL_EN AS DESCRIPTION_EN, LABEL_FR AS DESCRIPTION_FR, AREA_TYPE_CODE FROM refs_gis.AREAS") %>% {setnames(., new = toupper(names(.))); .}
CL_GEARS = query(C_REFERENCE_DATA, query = "SELECT DISTINCT CODE AS GEAR_CODE, NAME_EN, NAME_FR FROM refs_legacy.GEARS;") %>% {setnames(., new = toupper(names(.))); .}
CL_SCHOOL_TYPES = query(C_REFERENCE_DATA, query = "SELECT DISTINCT CODE AS CATCH_SCHOOL_TYPE_CODE, NAME_EN, NAME_FR FROM refs_legacy.SCHOOL_TYPES;") %>% {setnames(., new = toupper(names(.))); .}
CL_RAISINGS = query(C_REFERENCE_DATA, query = "SELECT DISTINCT CODE AS RAISING_CODE, NAME_EN, NAME_FR FROM refs_legacy.RAISINGS;") %>% {setnames(., new = toupper(names(.))); .}
CL_MEASUREMENTS = query(C_REFERENCE_DATA, query = "SELECT DISTINCT CODE AS MEASURE_TYPE_CODE, NAME_EN, DESCRIPTION_EN, NAME_FR, DESCRIPTION_FR FROM refs_biology.MEASUREMENTS WHERE CODE IN ('FL', 'LJ');") %>% {setnames(., new = toupper(names(.))); .}
l_info("Code lists extracted!")
source("03_SF_DATA_PROCESSING.R")
source("04_SF_DATA_PROCESSING_DESCRIPTION.R")
source("05_SF_DATA_QUALITY.R")
source("06_SPATIAL_LAYERS.R")
source("07_CL_FILTERING_FOR_EXPORT.R")
source("08_FL_DATA_EXPORT.R")
source("09_FL_METADATA_CONTENTS.R")
setwd("..")
render("./rmd/SF_METADATA.Rmd",
output_format = "html_document2",
output_file = paste0("METADATA_", TITLE, ".html"),
output_dir = "./outputs/html/",
params = list(dynamictitle = paste("METADATA FOR THE STANDARDISED SIZE-FREQUENCY DATA FOR ", toupper(SPECIES_SELECTED))))
CODE_SPECIES_SELECTED = "BET"
# Select the view in IOTDB
#VIEW = ifelse(CODE_SPECIES_SELECTED %in% c("BLT", "FRI", "KAW", "LOT", "COM", "GUT"), "vwSFNER", paste0("dbo.vwSF", CODE_SPECIES_SELECTED))
# Select the URL for the document on conversion factors and morphometric relationships
if(CODE_SPECIES_SELECTED %in% c("BET", "SKJ", "YFT")){
TITLE_CONVERSION_DOCUMENT = "IOTC-2023-WPTT25(AS)-DATA13"
URL_CONVERSION_DOCUMENT = "https://www.iotc.org/WPTT/25/Data/13-Equations"}
if(CODE_SPECIES_SELECTED %in% c("BLT", "FRI", "KAW", "LOT", "COM", "GUT"))
{
TITLE_CONVERSION_DOCUMENT = "IOTC-2022-WPNT12-DATA11"
URL_CONVERSION_DOCUMENT = "https://www.iotc.org/WPNT/12/Data/11-Equations"
}
if(CODE_SPECIES_SELECTED %in% c("BLM", "BUM", "MLS", "SFA", "SWO"))
{
TITLE_CONVERSION_DOCUMENT = "IOTC-2022-WPB20-DATA11"
URL_CONVERSION_DOCUMENT = "https://www.iotc.org/WPB/20/Data/11-Equations"
}
if(CODE_SPECIES_SELECTED %in% c("ALB"))
{
TITLE_CONVERSION_DOCUMENT = "IOTC-2025-WPTmT09(DP)-DATA11"
URL_CONVERSION_DOCUMENT = "https://www.iotc.org/WPTmT/09DP/Data/11-Equations"
}
render("./rmd/SF_METADATA.Rmd",
output_format = "html_document2",
output_file = paste0("METADATA_", TITLE, ".html"),
output_dir = "./outputs/html/",
params = list(dynamictitle = paste("METADATA FOR THE STANDARDISED SIZE-FREQUENCY DATA FOR ", toupper(SPECIES_SELECTED))))
# Add HTML in archive
zip::zip_append(paste0("./outputs/", TITLE, ".zip"), files = paste0("./outputs/html/METADATA_", TITLE, ".html"), mode = "cherry-pick")
# Add HTML in archive
zip::zip_append(paste0("./outputs/data/", TITLE, ".zip"), files = paste0("./outputs/html/METADATA_", TITLE, ".html"), mode = "cherry-pick")
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
warnings()
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
warningS()
warnings()
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
METADATA_SIZE_STANDARDS_TABLE
SPECIES_SELECTED
CL_SPECIES[SPECIES_CODE == CODE_SPECIES_SELECTED
]
CL_SPECIES[SPECIES_CODE == CODE_SPECIES_SELECTED, ]
CL_SPECIES
query(C_REFERENCE_DATA, query = paste0("SELECT * FROM refs_biology.SPECIES WHERE CODE = \'", CODE_SPECIES_SELECTED, "\';"))
query(C_REFERENCE_DATA, query = paste0("SELECT code AS species_code, name_en AS species, name_scientific AS species_scientific FROM refs_biology.species WHERE CODE = \'", CODE_SPECIES_SELECTED, "\';")) %>% {setnames(., new = toupper(names(.))); .}
query(C_REFERENCE_DATA, query = "SELECT distinct fleet_code, name_en, name_fr FROM refs_legacy.fleets;") %>% {setnames(., new = toupper(names(.))); .}
query(C_REFERENCE_DATA, query = "SELECT DISTINCT CODE AS GEAR_CODE, NAME_EN, NAME_FR FROM refs_legacy.GEARS;") %>% {setnames(., new = toupper(names(.))); .}
query(C_REFERENCE_DATA, query = "SELECT DISTINCT CODE AS GEAR_CODE, NAME_EN, NAME_FR FROM refs_legacy.GEARS;") %>% {setnames(., new = toupper(names(.))); .}
warnings()
l_info("Extract code lists...")
## Recommended Size Measurements
#CL_SIZE_REC_TABLE = fread(input = "https://data.iotc.org/reference/latest/domain/biology/codelists/RECOMMENDED_MEASUREMENTS_1.0.0.csv")[SPECIES_CODE == CODE_SPECIES_SELECTED]
CL_SIZE_REC_TABLE = query(C_REFERENCE_DATA, paste0("SELECT * FROM refs_biology.recommended_measurements WHERE species_code = \'", CODE_SPECIES_SELECTED, "\';"))  %>% {setnames(., new = toupper(names(.))); .}
CL_SIZE_REC = CL_SIZE_REC_TABLE[, .(`Type of measurement code` = TYPE_OF_MEASUREMENT_CODE, `Measurement code` = MEASUREMENT_CODE, `Default measurement interval` = DEFAULT_MEASUREMENT_INTERVAL, `Maximum measurement interval` = MAX_MEASUREMENT_INTERVAL, `Minimum size` = MIN_MEASUREMENT, `Maximum size` = MAX_MEASUREMENT)]
# Add measurement unit
CL_SIZE_REC[, `Measurement unit` := "cm"]
setcolorder(CL_SIZE_REC, neworder = c(1, 2, 7, 3, 4, 5, 6))
CL_SIZE_REC = data.frame(as.data.table(t(CL_SIZE_REC), keep.rownames = TRUE))
names(CL_SIZE_REC) = c("", "")
# Full code lists
CL_SPECIES = query(C_REFERENCE_DATA, query = paste0("SELECT code AS species_code, name_en AS species, name_scientific AS species_scientific FROM refs_biology.species WHERE CODE = \'", CODE_SPECIES_SELECTED, "\';")) %>% {setnames(., new = toupper(names(.))); .}
CL_FLEETS = query(C_REFERENCE_DATA, query = "SELECT DISTINCT fleet_code, name_en, name_fr FROM refs_legacy.fleets;") %>% {setnames(., new = toupper(names(.))); .}
CL_FISHING_GROUNDS = query(C_REFERENCE_DATA, query = "SELECT code AS fishing_ground_code, label_en AS description_en, label_fr AS description_fr, area_type_code FROM refs_gis.areas") %>% {setnames(., new = toupper(names(.))); .}
CL_GEARS = query(C_REFERENCE_DATA, query = "SELECT DISTINCT code AS gear_code, NAME_EN, NAME_FR FROM refs_legacy.GEARS;") %>% {setnames(., new = toupper(names(.))); .}
CL_SCHOOL_TYPES = query(C_REFERENCE_DATA, query = "SELECT DISTINCT code AS catch_school_type_code, name_en, name_fr FROM refs_legacy.SCHOOL_TYPES;") %>% {setnames(., new = toupper(names(.))); .}
CL_RAISINGS = query(C_REFERENCE_DATA, query = "SELECT DISTINCT code AS raising_code, name_en, name_fr FROM refs_legacy.raisings;") %>% {setnames(., new = toupper(names(.))); .}
CL_MEASUREMENTS = query(C_REFERENCE_DATA, query = "SELECT DISTINCT code AS measure_type_code, name_en, description_en, name_fr, description_fr FROM refs_biology.measurements WHERE CODE IN ('FL', 'LJ');") %>% {setnames(., new = toupper(names(.))); .}
l_info("Code lists extracted!")
tolower(CL_SPECIES[SPECIES_CODE == CODE_SPECIES_SELECTED, SPECIES)]
tolower(CL_SPECIES[SPECIES_CODE == CODE_SPECIES_SELECTED, SPECIES)])
tolower(CL_SPECIES[SPECIES_CODE == CODE_SPECIES_SELECTED, SPECIES])
CL_SPECIES[SPECIES_CODE == CODE_SPECIES_SELECTED, SPECIES_SCIENTIFIC]
ls()
CODE_SPECIES_SELECTED = "BET"
START_YEAR            = 1950
END_YEAR              = 2024
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
warnings()
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
warnings()
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
paste0(START_YEAR, "-", END_YEAR)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
warnings()
warnings()
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
lengthLengthEquations
METADATA_SIZE_STANDARDS
METADATA_SIZE_STANDARDS_TABLE
l_info("Loading some TableFormat function")
TableFormat = function(DataTable){
DataTableFT =
DataTable %>%
flextable() %>%
flextable::font(part = "all", fontname = "calibri") %>%
flextable::fontsize(part = "all", size = 10) %>%
bold(part = "header") %>%
bg(part = "header", bg = "grey") %>%
fontsize(part = "all", size = 9) %>%
align(align = "center", part = "header") %>%
align(j = 1, align = "center", part = "body") %>%
border_inner() %>%
border_outer(border = fp_border(width = 2)) %>%
colformat_double(digits = 0) %>%
autofit()
return(DataTableFT)
}
l_info("TableFormat function loaded!")
TableFormat(METADATA_SIZE_STANDARDS)
TableFormat(METADATA_SIZE_STANDARDS)Q
TableFormat(METADATA_SIZE_STANDARDS_TABLE)
names(METADATA_SIZE_STANDARDS_TABLE)
v
TableFormat(METADATA_SIZE_STANDARDS_TABLE[, -c("Type of measurement code")])
popo = iotc.data.reference.datasets.SF.std::STD.TROP.BET
popo[, .M]
popo[, .N]
sum(duplicated(popo))
METADATA_SIZE_STANDARDS_TABLE
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
names(METADATA_SIZE_STANDARDS_TABLE)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste("Standardisation of the size-frequency data for ", SPECIES_SELECTED))
)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste0("Standardisation of the size-frequency data for ", SPECIES_SELECTED, START_YEAR, "--", END_YEAR))
)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste0("Standardisation of the size-frequency data for ", SPECIES_SELECTED, " ", START_YEAR, "--", END_YEAR))
)
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste0("Standardisation of the size-frequency data for ", SPECIES_SELECTED, " ", START_YEAR, "--", END_YEAR))
)
lengthLengthEquations
sort(unique(SF_RAW_DATA_SPECIES$MEASURE_TYPE_CODE))
LEGACY_MEASUREMENT_TYPES_IOTDB = query_IOTDB("SELECT * FROM meta.MEASURE_TYPES")
LEGACY_MEASUREMENT_TYPES_IOTDB = query(DB_IOTDB(), "SELECT * FROM meta.MEASURE_TYPES")
LEGACY_MEASUREMENT_TYPES_IOTDB
# Remove previous legacy table
sql_drop = "DROP TABLE IF EXISTS refs_legacy.measurement_types CASCADE;"
# Remove previous legacy table
sql_drop = "DROP TABLE IF EXISTS refs_legacy.measurement_types;"
# Run the query
dbExecute(C_REFERENCE_DATA, sql_drop)
# Create
sql_create = "CREATE TABLE refs_legacy.measurement_types(
sort INTEGER NOT NULL,
code VARCHAR(16) PRIMARY KEY NOT NULL,
name_en VARCHAR(64),
measure_unit VARCHAR(16)
)"
# Run the query
dbExecute(C_REFERENCE_DATA, sql_create)
sql_insert = make_sql_inserts(LEGACY_MEASUREMENT_TYPES_IOTDB,
schema = "refs_legacy",
table = "measurement_types",
file  = "./insert_legacy_measurement_types.sql",
header = "-- Insertion of Legacy Measurement Types into IOTC_ReferenceData\nBEGIN;",
footer = "COMMIT;",
truncate = TRUE
)
setwd("Z:/03_Data/04_Data_management/Databases/IOTC_ReferenceData/05_revisions")
# Function for SQL statements
source("../../make_sql_inserts_function.R")
library(iotc.core.db.connections)
library(iotc.core.db.data)
library(DBI)
library(RPostgres)
library(data.table)
sql_insert = make_sql_inserts(LEGACY_MEASUREMENT_TYPES_IOTDB,
schema = "refs_legacy",
table = "measurement_types",
file  = "./insert_legacy_measurement_types.sql",
header = "-- Insertion of Legacy Measurement Types into IOTC_ReferenceData\nBEGIN;",
footer = "COMMIT;",
truncate = TRUE
)
cat(sql_insert, sep = "\n")
# Run the query
dbExecute(C_REFERENCE_DATA, prep_sql_lines("insert_legacy_measurement_types.sql"))
source("../../prep_sql_lines_function.R")
# Run the query
dbExecute(C_REFERENCE_DATA, prep_sql_lines("insert_legacy_measurement_types.sql"))
cat(sql_insert, sep = "\n")
sql_insert = make_sql_inserts(LEGACY_MEASUREMENT_TYPES_IOTDB,
schema = "refs_legacy",
table = "measurement_types",
file  = "./insert_legacy_measurement_types.sql",
header = "-- Insertion of Legacy Measurement Types into IOTC_ReferenceData\nBEGIN;",
footer = "COMMIT;",
truncate = FALSE
)
cat(sql_insert, sep = "\n")
# Run the query
dbExecute(C_REFERENCE_DATA, prep_sql_lines("insert_legacy_measurement_types.sql"))
sql_insert = make_sql_inserts(LEGACY_MEASUREMENT_TYPES_IOTDB,
schema = "refs_legacy",
table = "measurement_types",
file  = "./insert_legacy_measurement_types.sql",
header = "-- Insertion of Legacy Measurement Types into IOTC_ReferenceData\nBEGIN;",
footer = "COMMIT;",
truncate = FALSE
)
LEGACY_MEASUREMENT_TYPES_IOTDB = query(DB_IOTDB(), "SELECT * FROM meta.MEASURE_TYPES")
sql_insert = make_sql_inserts(LEGACY_MEASUREMENT_TYPES_IOTDB,
schema = "refs_legacy",
table = "measurement_types",
file  = "./insert_legacy_measurement_types.sql",
header = "-- Insertion of Legacy Measurement Types into IOTC_ReferenceData",
footer = ";",
truncate = FALSE
)
cat(sql_insert, sep = "\n")
# Run the query
dbExecute(C_REFERENCE_DATA, prep_sql_lines("insert_legacy_measurement_types.sql"))
# Remove previous legacy table
sql_drop = "DROP TABLE IF EXISTS refs_legacy.measurement_types;"
# Run the query
dbExecute(C_REFERENCE_DATA, sql_drop)
# Create
sql_create = "CREATE TABLE refs_legacy.measurement_types(
code VARCHAR(10) PRIMARY KEY NOT NULL,
name_en VARCHAR(100),
name_fr VARCHAR(100)
measure_unit VARCHAR(10)
)"
# Run the query
dbExecute(C_REFERENCE_DATA, sql_create)
# Create
sql_create = "CREATE TABLE refs_legacy.measurement_types(
code VARCHAR(10) PRIMARY KEY NOT NULL,
name_en VARCHAR(100),
name_fr VARCHAR(100),
measure_unit VARCHAR(10)
)"
# Run the query
dbExecute(C_REFERENCE_DATA, sql_create)
LEGACY_MEASUREMENT_TYPES_IOTDB
LEGACY_MEASUREMENT_TYPES_IOTDB = query(DB_IOTDB(), "SELECT CODE, NAME_EN, '' AS NAME_FR, MEASURE_UNIT FROM meta.MEASURE_TYPES")
LEGACY_MEASUREMENT_TYPES_IOTDB
sql_insert = make_sql_inserts(LEGACY_MEASUREMENT_TYPES_IOTDB,
schema = "refs_legacy",
table = "measurement_types",
file  = "./insert_legacy_measurement_types.sql",
header = "-- Insertion of Legacy Measurement Types into IOTC_ReferenceData",
footer = ";",
truncate = FALSE
)
cat(sql_insert, sep = "\n")
# Run the query
dbExecute(C_REFERENCE_DATA, prep_sql_lines("insert_legacy_measurement_types.sql"))
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste0("Standardisation of the size-frequency data for ", SPECIES_SELECTED, " ", START_YEAR, "--", END_YEAR))
)
getwd()
setwd("C:/Users/echassot/Desktop/repositories/data-processing/iotc-sf-data-processing")
render("./rmd/SF_DESCRIPTION.Rmd", output_file = paste0("DESCRIPTION_", TITLE, ".docx"),
output_dir = "./outputs/docx/",
params = list(dynamictitle = paste0("Standardisation of the size-frequency data for ", SPECIES_SELECTED, " ", START_YEAR, "--", END_YEAR))
)
1520/2
