alternativeLengthMeasurementCodes
alternativeLengthMeasurementCodes[inid]
alternativeLengthMeasurementCodes[indic]
length(indic)
indic = alternativeLengthMeasurementCodes$MEASUREMENT_CODE %in% SF_RAW_DATA_SPECIES$MEASURE_TYPE_CODE
indic
alternativeLengthMeasurementCodes[indic == TRUE, GENERAL_CODE]
indic = alternativeLengthMeasurementCodes$MEASUREMENT_CODE %in% SF_RAW_DATA_SPECIES$MEASURE_TYPE_CODE
lengthCodesDataset = unique(alternativeLengthMeasurementCodes[indic, GENERAL_CODE])
lengthLengthEquations = DEFAULT_IOTC_LL_EQUATIONS[SPECIES == CODE_SPECIES_SELECTED]
lengthCodesDataset
lengthLengthEquations[FROM %in% lengthCodesDataset]
lengthLengthEquations[!FROM %in% lengthCodesDataset]
lengthCodesDataset[lengthLengthEquations$FROM %in% lengthCodesDataset]
alternativeLengthMeasurementCodes =
data.table(MEASUREMENT_CODE = c("CF", "CKL", "CKUT", "EFL", "EFUT", "FLB", "FLC", "FLCT", "FLUT", "LDF", "LDFT", "MLD", "PAL", "PALT", "PCL", "PCLT", "TL"),
GENERAL_CODE = c("CF", "CKL", "CKL", "EFL", "EFL", "FL", "FL", "FL", "FL", "LDF", "LDF", "MLD", "PAL", "PAL", "PCL", "PCL", "TL")
)
indic = alternativeLengthMeasurementCodes$MEASUREMENT_CODE %in% SF_RAW_DATA_SPECIES$MEASURE_TYPE_CODE
lengthCodesDataset = unique(alternativeLengthMeasurementCodes[indic, GENERAL_CODE])
lengthLengthEquations = DEFAULT_IOTC_LL_EQUATIONS[SPECIES == CODE_SPECIES_SELECTED]
lengthCodesDataset[lengthLengthEquations$FROM %in% lengthCodesDataset]
lengthCodesDataset
alternativeLengthMeasurementCodes =
data.table(MEASUREMENT_CODE = c("CF", "CKL", "CKUT", "EFL", "EFUT", "FL", "FLB", "FLC", "FLCT", "FLUT", "LDF", "LDFT", "MLD", "PAL", "PALT", "PCL", "PCLT", "TL"),
GENERAL_CODE = c("CF", "CKL", "CKL", "EFL", "EFL", "FL", "FL", "FL", "FL", "FL", "LDF", "LDF", "MLD", "PAL", "PAL", "PCL", "PCL", "TL")
)
indic = alternativeLengthMeasurementCodes$MEASUREMENT_CODE %in% SF_RAW_DATA_SPECIES$MEASURE_TYPE_CODE
lengthCodesDataset = unique(alternativeLengthMeasurementCodes[indic, GENERAL_CODE])
lengthCodesDataset
lengthLengthEquations = DEFAULT_IOTC_LL_EQUATIONS[SPECIES == CODE_SPECIES_SELECTED]
lengthCodesDataset[lengthLengthEquations$FROM %in% lengthCodesDataset]
lengthLengthEquations$FROM
lengthCodesDataset %in% lengthLengthEquations$FROM]
lengthCodesDataset %in% lengthLengthEquations$FROM
lengthCodesDataset[lengthCodesDataset %in% lengthLengthEquations$FROM]
lengthCodesDataset[!lengthCodesDataset %in% lengthLengthEquations$FROM]
lengthCodesDataset[lengthCodesDataset %in% lengthLengthEquations$FROM]
LengthConversionToForkLengthMissing = lengthCodesDataset[!lengthCodesDataset %in% lengthLengthEquations$FROM]
LengthConversionToForkLengthMissing
lengthConversionToForkLengthAvailable = lengthCodesDataset[lengthCodesDataset != "FL" & lengthCodesDataset %in% lengthLengthEquations$FROM]
lengthConversionToForkLengthAvailable
lengthConversionToForkLengthMissing = lengthCodesDataset[lengthCodesDataset != "FL" & !lengthCodesDataset %in% lengthLengthEquations$FROM]
lengthConversionToForkLengthMissing
SF_RAW_DATA_SPECIES[(CLASS_HIGH  - CLASS_LOW) > CL_SIZE_REC_TABLE$MAX_MEASUREMENT_INTERVAL]
SF_MissingForkLengthConversion = SF_RAW_DATA_SPECIES[MEASURE_TYPE_CODE %in% lengthConversionToForkLengthMissing]
SF_MissingForkLengthConversion
SF_MissingForkLengthConversion[, .(FISH_COUNT = sum(FISH_COUNT)), keyby = .(MEASURE_TYPE_CODE)]
SF_MissingForkLengthConversion[, .(FISH_COUNT = sum(FISH_COUNT)), keyby = .(FLEET_CODE, FISHERY_CODE, MEASURE_TYPE_CODE)]
SF_RAW_DATA_SPECIES[MEASURE_TYPE_CODE %in% lengthConversionToForkLengthMissing]
SF_DATA_SPECIES[1]
lengthWeightEquations = DEFAULT_IOTC_LW_EQUATIONS[SPECIES == CODE_SPECIES_SELECTED]
lengthWeightEquations
source("C:/Users/echassot/Desktop/repositories/data-processing/iotc-sf-data-processing/initialisation/04_SF_DATA_PROCESSING_DESCRIPTION.R")
weightCodesDataset = sort(unique(SF_RAW_DATA_SPECIES$MEASURE_TYPE_CODE))
weightCodesDataset
weightCodesDataset = sort(unique(SF_RAW_DATA_SPECIES[!MEASURE_TYPE_CODE %in% lengthCodesDataset, MEASURE_TYPE_CODE]))
weightCodesDataset
unique(alternativeLengthMeasurementCodes[indic, MEASUREMENT_CODE])
lengthCodesDataset = unique(alternativeLengthMeasurementCodes[indic, GENEMEASUREMENT_CODERAL_CODE])
### 2- Missing length-length conversion equations ####
alternativeLengthMeasurementCodes =
data.table(MEASUREMENT_CODE = c("CF", "CKL", "CKUT", "EFL", "EFUT", "FL", "FLB", "FLC", "FLCT", "FLUT", "LDF", "LDFT", "MLD", "PAL", "PALT", "PCL", "PCLT", "TL"),
GENERAL_CODE = c("CF", "CKL", "CKL", "EFL", "EFL", "FL", "FL", "FL", "FL", "FL", "LDF", "LDF", "MLD", "PAL", "PAL", "PCL", "PCL", "TL")
)
indic = alternativeLengthMeasurementCodes$MEASUREMENT_CODE %in% SF_RAW_DATA_SPECIES$MEASURE_TYPE_CODE
lengthCodesDataset = unique(alternativeLengthMeasurementCodes[indic, GENEMEASUREMENT_CODERAL_CODE])
lengthCodesDataset = unique(alternativeLengthMeasurementCodes[indic, MEASUREMENT_CODERAL_CODE])
lengthCodesDataset = unique(alternativeLengthMeasurementCodes[indic, MEASUREMENT_CODE])
lengthCodesDataset
simplifiedLengthCodesDataset = unique(alternativeLengthMeasurementCodes[indic, GENERAL_CODE])
simplifiedLengthCodesDataset
lengthConversionToForkLengthAvailable = simplifiedLengthCodesDataset[simplifiedLengthCodesDataset %in% lengthLengthEquations$FROM]
lengthConversionToForkLengthMissing = simplifiedLengthCodesDataset[simplifiedLengthCodesDataset != "FL" & !simplifiedLengthCodesDataset %in% lengthLengthEquations$FROM]
SF_MissingForkLengthConversion = SF_RAW_DATA_SPECIES[MEASURE_TYPE_CODE %in% lengthConversionToForkLengthMissing]
SF_MissingForkLengthConversion
weightCodesDataset = sort(unique(SF_RAW_DATA_SPECIES[!MEASURE_TYPE_CODE %in% lengthCodesDataset, MEASURE_TYPE_CODE]))
weightCodesDataset
weightConversionToRoundWeightAvailable = weightCodesDataset[weightCodesDataset %in% lengthWeightEquations$FROM]
weightConversionToRoundWeightAvailable
lengthWeightEquations$FROM
weightCodesDataset[weightCodesDataset %in% lengthWeightEquations$TO]
lengthLengthEquations
lengthWeightEquations
weightCodesDataset
data.table(SPECIES = c("ALB", "BET", "YFT"), FROM = c("GGT", "GGT", "GGT"), TO = c("RND", "RND", "RND"), A = 1.13, B = 0, EQ_ID = "", NOTES = NA )
weightWeightEquations = data.table(SPECIES = c("ALB", "BET", "YFT"), FROM = c("GGT", "GGT", "GGT"), TO = c("RND", "RND", "RND"), A = 1.13, B = 0, EQ_ID = "EQ_PROP", NOTES = NA )
weightWeightEquations
sort(unique(SF_RAW_DATA_SPECIES[!MEASURE_TYPE_CODE %in% lengthCodesDataset, MEASURE_TYPE_CODE]))
weightCodesDataset[weightCodesDataset %in% lengthWeightEquations$FROM]
weightCodesDataset[weightCodesDataset %in% weightWeightEquations$FROM]
weightCodesDataset[weightCodesDataset != "RND" & !weightCodesDataset %in% weightWeightEquations$FROM]
weightCodesDataset = sort(unique(SF_RAW_DATA_SPECIES[!MEASURE_TYPE_CODE %in% lengthCodesDataset, MEASURE_TYPE_CODE]))
weightConversionToRoundWeightAvailable = weightCodesDataset[weightCodesDataset %in% weightWeightEquations$FROM]
weightConversionToRoundWeightMissing = weightCodesDataset[weightCodesDataset != "RND" & !weightCodesDataset %in% weightWeightEquations$FROM]
SF_MissingRoundWeightConversion = SF_RAW_DATA_SPECIES[MEASURE_TYPE_CODE %in% weightConversionToRoundWeightMissing]
SF_MissingRoundWeightConversion
SF_MissingRoundWeightConversion = SF_RAW_DATA_SPECIES[MEASURE_TYPE_CODE %in% weightConversionToRoundWeightMissing]
SF_MissingRoundWeightConversion[, .(FISH_COUNT = sum(FISH_COUNT)), keyby = .(FLEET_CODE, GEAR_CODE)]
SF_MissingRoundWeightConversion[, .(FISH_COUNT = sum(FISH_COUNT)), keyby = .(FLEET_CODE, GEAR_CODE, MEASURE_TYPE_CODE)]
SF_MissingRoundWeightConversion[, .(FISH_COUNT = sum(FISH_COUNT)), keyby = .(FLEET_CODE, GEAR_CODE, YEAR, MEASURE_TYPE_CODE)]
SF_RAW_DATA_SPECIES[MEASURE_TYPE_CODE == "GIL", .N, .(FLEET_CODE)]
SF_RAW_DATA_SPECIES[MEASURE_TYPE_CODE == "GIL", .N, .(FLEET_CODE, GEAR_CODE, SPECIES_CODE)]
SF_RAW[MEASURE_TYPE_CODE == "GIL", .N, .(FLEET_CODE, GEAR_CODE, SPECIES_CODE)]
SF_RAW_DATA_SPECIES[MEASURE_TYPE_CODE == "GGT"][1]
lengthConversionToForkLengthMissing
FL_STD_DATA_SPECIES_TABLE[1]
names(FL_STD_DATA_SPECIES)
FL_STD_DATA_SPECIES[1:2]
CL_SIZE_REC_TABLE$MAX_MEASUREMENT
FL_STD_DATA_SPECIES[(CLASS_LOW + CLASS_HIGH)/2 > CL_SIZE_REC_TABLE$MAX_MEASUREMENT]
FL_STD_DATA_SPECIES[(CLASS_LOW + CLASS_HIGH)/2 > CL_SIZE_REC_TABLE$MAX_MEASUREMENT, .(N = sum(FISH_COUNT)), keyby = .(FLEET_CODE, GEAR_CODE)]
SF_RAW_DATA_SPECIES[FLEET_CODE == "SYC" & GEAR_CODE == "LL", .(FISH_COUNT = sum(FISH_COUNT)), keyby = .(YEAR, GEAR_CODE)]
SF_RAW_DATA_SPECIES[FLEET_CODE == "SYC" & GEAR_CODE == "LL", .(FISH_COUNT = sum(FISH_COUNT)), keyby = .(YEAR, MEASURE_TYPE_CODE)]
SF_RAW_DATA_SPECIES[FLEET_CODE == "SYC" & GEAR_CODE == "FLL", .(FISH_COUNT = sum(FISH_COUNT)), keyby = .(YEAR, MEASURE_TYPE_CODE)]
SF_RAW_DATA_SPECIES[FLEET_CODE == "SYC" & GEAR_CODE == "PS", .(FISH_COUNT = sum(FISH_COUNT)), keyby = .(YEAR, MEASURE_TYPE_CODE)]
SF_raw(years = 2024)[MEASURE_TYPE_CODE == "LDF"]
SF_raw(years = 2024)[MEASURE_TYPE_CODE == "LDF", .N, .(FLEET_CODE, GEAR_CODE)]
SF_RAW_DATA_SPECIES[MEASURE_TYPE_CODE == "FL"][1]
# Temp fix for tunas caught in Seychelles in 2024
SF_RAW_DATA_SPECIES[YEAR == 2024 & FLEET_CODE == "SYC" & GEAR_CODE == "PS", `:=` (MEASURE_TYPE_CODE == "FL", MEASURE_TYPE = "Fork length (lower jaw fork length for BIL)")]
# Temp fix for tunas caught in Seychelles in 2024
SF_RAW_DATA_SPECIES[YEAR == 2024 & FLEET_CODE == "SYC" & GEAR_CODE == "PS", `:=` (MEASURE_TYPE_CODE = "FL", MEASURE_TYPE = "Fork length (lower jaw fork length for BIL)")]
SF_raw(years = 2024)[MEASURE_TYPE_CODE == "LDF"]
SF_RAW_DATA_SPECIES[YEAR == 2024 & MEASURE_TYPE_CODE == "LDF", .N, .(FLEET_CODE)]
SF_RAW_DATA_SPECIES[MEASURE_TYPE_CODE == "FLUT"][1]
l_info("Extracting the raw size-frequency data...")
# Map legacy IOTDB codes to new codes
LEGACY_NEW_IRREGULAR_AREAS_MAPPING = fread("../inputs/mappings/MAPPING_SF_IRREGULAR_AREAS_IOTDB_MASTER.csv", colClasses = c("character", "character"))
# Extract the raw size data
SF_RAW_DATA_SPECIES = SF_raw(species_code = CODE_SPECIES_SELECTED)
# Temp fix for tunas caught in Australian longline fisheries
# To do in the database
SF_RAW_DATA_SPECIES[SPECIES_CODE %in% c("BET", "YFT") & MEASURE_TYPE_CODE == "GIL", `:=` (MEASURE_TYPE_CODE = "GGT", MEASURE_TYPE = "Gilled and gutted (bill is off for billfish)")]
# Temp fix for tunas caught in Seychelles in 2024
SF_RAW_DATA_SPECIES[YEAR == 2024 & FLEET_CODE == "SYC" & GEAR_CODE == "PS", `:=` (MEASURE_TYPE_CODE = "FL", MEASURE_TYPE = "Fork length (lower jaw fork length for BIL)")]
SF_RAW_DATA_SPECIES[YEAR == 2024 & FLEET_CODE == "SYC" & GEAR_CODE == "PS", `:=` (MEASURE_TYPE_CODE = "FLUT", MEASURE_TYPE = "Fork length (unconverted tape measure lengths)")]
# Save legacy fishing ground
setnames(SF_RAW_DATA_SPECIES, old = "FISHING_GROUND_CODE", new = "LEGACY_FISHING_GROUND_CODE")
# Update fishing ground codes for non-regular areas (from IOTCStatistics to IOTC_Master)
SF_RAW_DATA_SPECIES = merge(SF_RAW_DATA_SPECIES, LEGACY_NEW_IRREGULAR_AREAS_MAPPING, by.x = "LEGACY_FISHING_GROUND_CODE", by.y = "LEGACY_FISHING_GROUND_CODE", all.x = TRUE)
# Keep regular fishing grounds
SF_RAW_DATA_SPECIES[substring(LEGACY_FISHING_GROUND_CODE, 1, 1) %in% c("5", "6") & is.na(FISHING_GROUND_CODE), FISHING_GROUND_CODE := LEGACY_FISHING_GROUND_CODE]
# Remove legacy fishing grounds
SF_RAW_DATA_SPECIES[, LEGACY_FISHING_GROUND_CODE := NULL]
# List of non standard areas in the raw SF dataset
LIST_NON_STANDARD_AREAS = sort(unique(SF_RAW_DATA_SPECIES[!substring(FISHING_GROUND_CODE, 1, 1) %in% c("5", "6"), FISHING_GROUND_CODE]))
l_info("Raw size-frequency data extracted!")
rm(list = ls())
gc()
# Clears the environment
rm(list = ls())
# To avoid switch to scientific notation
options(scipen = 9999)
# Load libraries
source("90_LIBS.R")
source("91_TABLEFORMAT_FUNCTION.R")
source("92_STANDARD_SIZE_DATASET_FORMAT_CONVERTER.R")
# Define species of interest
CODE_SPECIES_SELECTED = 'BET'
# Define connection to postgres version of the code list database
C_REFERENCE_DATA =
DBI::dbConnect(drv = RPostgres::Postgres(),
host = Sys.getenv("IOTC_REFERENCE_DATA_DB_SERVER"),
dbname = 'IOTC_ReferenceData_2025_07_23',
port = 5432,
user = Sys.getenv("IOTC_REFERENCE_DATA_DB_USER"),
password = Sys.getenv("IOTC_REFERENCE_DATA_DB_PWD")
)
# Load scripts
source("01_CL_EXTRACTION.R")
source("02_SF_DATA_EXTRACTION.R")
source("03_SF_DATA_PROCESSING.R")
source("04_SF_DATA_QUALITY.R")
lengthLengthEquations = DEFAULT_IOTC_LL_EQUATIONS[SPECIES == CODE_SPECIES_SELECTED]
lengthWeightEquations = DEFAULT_IOTC_LW_EQUATIONS[SPECIES == CODE_SPECIES_SELECTED]
weightWeightEquations = data.table(SPECIES = c("ALB", "BET", "YFT"), FROM = c("GGT", "GGT", "GGT"), TO = c("RND", "RND", "RND"), A = 1.13, B = 0, EQ_ID = "EQ_PROP", NOTES = NA )
## Fish samples removed ####
### 1- Records with non-standard bin size ####
SF_NonStandardBin = SF_RAW_DATA_SPECIES[(CLASS_HIGH  - CLASS_LOW) > CL_SIZE_REC_TABLE$MAX_MEASUREMENT_INTERVAL]
SF_NonStandardBin
### 2- Missing length-length conversion equations ####
alternativeLengthMeasurementCodes =
data.table(MEASUREMENT_CODE = c("CF", "CKL", "CKUT", "EFL", "EFUT", "FL", "FLB", "FLC", "FLCT", "FLUT", "LDF", "LDFT", "MLD", "PAL", "PALT", "PCL", "PCLT", "TL"),
GENERAL_CODE = c("CF", "CKL", "CKL", "EFL", "EFL", "FL", "FL", "FL", "FL", "FL", "LDF", "LDF", "MLD", "PAL", "PAL", "PCL", "PCL", "TL")
)
indic = alternativeLengthMeasurementCodes$MEASUREMENT_CODE %in% SF_RAW_DATA_SPECIES$MEASURE_TYPE_CODE
lengthCodesDataset = unique(alternativeLengthMeasurementCodes[indic, MEASUREMENT_CODE])
simplifiedLengthCodesDataset = unique(alternativeLengthMeasurementCodes[indic, GENERAL_CODE])
lengthConversionToForkLengthAvailable = simplifiedLengthCodesDataset[simplifiedLengthCodesDataset %in% lengthLengthEquations$FROM]
lengthConversionToForkLengthAvailable
lengthConversionToForkLengthMissing = simplifiedLengthCodesDataset[simplifiedLengthCodesDataset != "FL" & !simplifiedLengthCodesDataset %in% lengthLengthEquations$FROM]
lengthConversionToForkLengthMissing
SF_MissingForkLengthConversion = SF_RAW_DATA_SPECIES[MEASURE_TYPE_CODE %in% lengthConversionToForkLengthMissing]
SF_MissingForkLengthConversion
weightCodesDataset = sort(unique(SF_RAW_DATA_SPECIES[!MEASURE_TYPE_CODE %in% lengthCodesDataset, MEASURE_TYPE_CODE]))
weightConversionToRoundWeightAvailable = weightCodesDataset[weightCodesDataset %in% weightWeightEquations$FROM]
weightConversionToRoundWeightMissing = weightCodesDataset[weightCodesDataset != "RND" & !weightCodesDataset %in% weightWeightEquations$FROM]
weightConversionToRoundWeightMissing
weightConversionToRoundWeightAvailable = weightCodesDataset[weightCodesDataset %in% weightWeightEquations$FROM]
weightConversionToRoundWeightAvailable
SF_RAW_DATA_SPECIES[MEASURE_TYPE_CODE == "PPD", .(MEASURE_TYPE)][1]
SF_MissingRoundWeightConversion = SF_RAW_DATA_SPECIES[MEASURE_TYPE_CODE %in% weightConversionToRoundWeightMissing]
SF_MissingRoundWeightConversion
FL_STD_DATA_SPECIES[(CLASS_LOW + CLASS_HIGH)/2 > CL_SIZE_REC_TABLE$MAX_MEASUREMENT]
FL_STD_DATA_SPECIES[(CLASS_LOW + CLASS_HIGH)/2 > CL_SIZE_REC_TABLE$MAX_MEASUREMENT, .(N = sum(FISH_COUNT)), keyby = .(FLEET_CODE, GEAR_CODE)]
gc()
rm(list = ls())
source("01_CL_EXTRACTION.R")
# Clears the environment
rm(list = ls())
# To avoid switch to scientific notation
options(scipen = 9999)
# Load libraries
source("90_LIBS.R")
source("91_TABLEFORMAT_FUNCTION.R")
source("92_STANDARD_SIZE_DATASET_FORMAT_CONVERTER.R")
# Define species of interest
CODE_SPECIES_SELECTED = 'BET'
# Define connection to postgres version of the code list database
C_REFERENCE_DATA =
DBI::dbConnect(drv = RPostgres::Postgres(),
host = Sys.getenv("IOTC_REFERENCE_DATA_DB_SERVER"),
dbname = 'IOTC_ReferenceData_2025_07_23',
port = 5432,
user = Sys.getenv("IOTC_REFERENCE_DATA_DB_USER"),
password = Sys.getenv("IOTC_REFERENCE_DATA_DB_PWD")
)
# Load scripts
source("01_CL_EXTRACTION.R")
source("02_SF_DATA_EXTRACTION.R")
source("03_SF_DATA_PROCESSING.R")
# Official morphometric relationships
lengthLengthEquations = DEFAULT_IOTC_LL_EQUATIONS[SPECIES == CODE_SPECIES_SELECTED]
lengthWeightEquations = DEFAULT_IOTC_LW_EQUATIONS[SPECIES == CODE_SPECIES_SELECTED]
weightWeightEquations = data.table(SPECIES = c("ALB", "BET", "YFT"), FROM = c("GGT", "GGT", "GGT"), TO = c("RND", "RND", "RND"), A = 1.13, B = 0, EQ_ID = "EQ_PROP", NOTES = NA )
### 1- Records with non-standard bin size ####
SF_NonStandardBin = SF_RAW_DATA_SPECIES[(CLASS_HIGH  - CLASS_LOW) > CL_SIZE_REC_TABLE$MAX_MEASUREMENT_INTERVAL]
weightWeightEquations = data.table(SPECIES = c("ALB", "BET", "YFT"), FROM = c("GGT", "GGT", "GGT"), TO = c("RND", "RND", "RND"), A = 1.13, B = 0, EQ_ID = "EQ_PROP", NOTES = NA )[SPECIES == CODE_SPECIES_SELECTED]
weightWeightEquations
lengthLengthEquations = DEFAULT_IOTC_LL_EQUATIONS[SPECIES == CODE_SPECIES_SELECTED]
lengthWeightEquations = DEFAULT_IOTC_LW_EQUATIONS[SPECIES == CODE_SPECIES_SELECTED]
weightWeightEquations = data.table(SPECIES = c("ALB", "BET", "YFT"), FROM = c("GGT", "GGT", "GGT"), TO = c("RND", "RND", "RND"), A = 1.13, B = 0, EQ_ID = "EQ_PROP", NOTES = NA )[SPECIES == CODE_SPECIES_SELECTED]
## Fish samples removed ####
### 1- Records with non-standard bin size ####
SF_NonStandardBin = SF_RAW_DATA_SPECIES[(CLASS_HIGH  - CLASS_LOW) > CL_SIZE_REC_TABLE$MAX_MEASUREMENT_INTERVAL]
### 2- Missing length-length conversion equations ####
alternativeLengthMeasurementCodes =
data.table(MEASUREMENT_CODE = c("CF", "CKL", "CKUT", "EFL", "EFUT", "FL", "FLB", "FLC", "FLCT", "FLUT", "LDF", "LDFT", "MLD", "PAL", "PALT", "PCL", "PCLT", "TL"),
GENERAL_CODE = c("CF", "CKL", "CKL", "EFL", "EFL", "FL", "FL", "FL", "FL", "FL", "LDF", "LDF", "MLD", "PAL", "PAL", "PCL", "PCL", "TL")
)
indic = alternativeLengthMeasurementCodes$MEASUREMENT_CODE %in% SF_RAW_DATA_SPECIES$MEASURE_TYPE_CODE
lengthCodesDataset = unique(alternativeLengthMeasurementCodes[indic, MEASUREMENT_CODE])
simplifiedLengthCodesDataset = unique(alternativeLengthMeasurementCodes[indic, GENERAL_CODE])
lengthConversionToForkLengthAvailable = simplifiedLengthCodesDataset[simplifiedLengthCodesDataset %in% lengthLengthEquations$FROM]
lengthConversionToForkLengthMissing = simplifiedLengthCodesDataset[simplifiedLengthCodesDataset != "FL" & !simplifiedLengthCodesDataset %in% lengthLengthEquations$FROM]
SF_MissingForkLengthConversion = SF_RAW_DATA_SPECIES[MEASURE_TYPE_CODE %in% lengthConversionToForkLengthMissing]
weightCodesDataset = sort(unique(SF_RAW_DATA_SPECIES[!MEASURE_TYPE_CODE %in% lengthCodesDataset, MEASURE_TYPE_CODE]))
weightConversionToRoundWeightAvailable = weightCodesDataset[weightCodesDataset %in% weightWeightEquations$FROM]
weightConversionToRoundWeightMissing = weightCodesDataset[weightCodesDataset != "RND" & !weightCodesDataset %in% weightWeightEquations$FROM]
SF_MissingRoundWeightConversion = SF_RAW_DATA_SPECIES[MEASURE_TYPE_CODE %in% weightConversionToRoundWeightMissing]
SF_MissingRoundWeightConversion
FL_STD_DATA_SPECIES[(CLASS_LOW + CLASS_HIGH)/2 > CL_SIZE_REC_TABLE$MAX_MEASUREMENT, .(N = sum(FISH_COUNT)), keyby = .(FLEET_CODE, GEAR_CODE)]
SF_RAW_DATA_SPECIES[FLEET_CODE == "SYC" & GEAR_CODE == "ELL", .(FISH_COUNT = sum(FISH_COUNT)), keyby = .(YEAR, FLEET_CODE, FISHERY_CODE)]
SF_RAW_DATA_SPECIES[FLEET_CODE == "SYC" & GEAR_CODE == "ELL", .(FISH_COUNT = sum(FISH_COUNT)), keyby = .(YEAR, FLEET_CODE, FISHERY_CODE, MEASURE_TYPE_CODE)]
SF_RAW_DATA_SPECIES[FLEET_CODE == "SYC" & GEAR_CODE == "ELL" & YEAR == 2011, .(FISH_COUNT = sum(FISH_COUNT)), keyby = .(YEAR, FLEET_CODE, FISHERY_CODE, MEASURE_TYPE_CODE)]
SF_RAW_DATA_SPECIES[FLEET_CODE == "SYC" & GEAR_CODE == "ELL" & YEAR == 2011]
gc()
l_info("Extracting the raw size-frequency data...")
# Map legacy IOTDB codes to new codes
LEGACY_NEW_IRREGULAR_AREAS_MAPPING = fread("../inputs/mappings/MAPPING_SF_IRREGULAR_AREAS_IOTDB_MASTER.csv", colClasses = c("character", "character"))
# Extract the raw size data
SF_RAW_DATA_SPECIES = SF_raw(species_code = CODE_SPECIES_SELECTED)
# Temp fix for tunas caught in Australian longline fisheries
# To do in the database
SF_RAW_DATA_SPECIES[SPECIES_CODE %in% c("BET", "YFT") & MEASURE_TYPE_CODE == "GIL", `:=` (MEASURE_TYPE_CODE = "GGT", MEASURE_TYPE = "Gilled and gutted (bill is off for billfish)")]
# Temp fix for tunas caught in Seychelles in 2024
SF_RAW_DATA_SPECIES[YEAR == 2024 & FLEET_CODE == "SYC" & GEAR_CODE == "PS", `:=` (MEASURE_TYPE_CODE = "FL", MEASURE_TYPE = "Fork length (lower jaw fork length for BIL)")]
SF_RAW_DATA_SPECIES[YEAR == 2024 & FLEET_CODE == "SYC" & GEAR_CODE %in% c("ELL", "LL", "FLL"), `:=` (MEASURE_TYPE_CODE = "FLUT", MEASURE_TYPE = "Fork length (unconverted tape measure lengths)")]
# Save legacy fishing ground
setnames(SF_RAW_DATA_SPECIES, old = "FISHING_GROUND_CODE", new = "LEGACY_FISHING_GROUND_CODE")
# Update fishing ground codes for non-regular areas (from IOTCStatistics to IOTC_Master)
SF_RAW_DATA_SPECIES = merge(SF_RAW_DATA_SPECIES, LEGACY_NEW_IRREGULAR_AREAS_MAPPING, by.x = "LEGACY_FISHING_GROUND_CODE", by.y = "LEGACY_FISHING_GROUND_CODE", all.x = TRUE)
# Keep regular fishing grounds
SF_RAW_DATA_SPECIES[substring(LEGACY_FISHING_GROUND_CODE, 1, 1) %in% c("5", "6") & is.na(FISHING_GROUND_CODE), FISHING_GROUND_CODE := LEGACY_FISHING_GROUND_CODE]
# Remove legacy fishing grounds
SF_RAW_DATA_SPECIES[, LEGACY_FISHING_GROUND_CODE := NULL]
# List of non standard areas in the raw SF dataset
LIST_NON_STANDARD_AREAS = sort(unique(SF_RAW_DATA_SPECIES[!substring(FISHING_GROUND_CODE, 1, 1) %in% c("5", "6"), FISHING_GROUND_CODE]))
l_info("Raw size-frequency data extracted!")
source("03_SF_DATA_PROCESSING.R")
FL_STD_DATA_SPECIES[(CLASS_LOW + CLASS_HIGH)/2 > CL_SIZE_REC_TABLE$MAX_MEASUREMENT, .(N = sum(FISH_COUNT)), keyby = .(FLEET_CODE, GEAR_CODE)]
SF_RAW_DATA_SPECIES[FLEET_CODE == "SYC", .N, .(GEAR_CODE)]
SF_RAW_DATA_SPECIES[FLEET_CODE == "SYC", .N, .(GEAR_CODE, MEASURE_TYPE_CODE)]
SF_RAW_DATA_SPECIES[FLEET_CODE == "SYC" & GEAR_CODE == "LLCO" & MEASURE_TYPE_CODE == "FLUT"]
SF_RAW_DATA_SPECIES[FLEET_CODE == "SYC" & GEAR_CODE == "LLCO" & MEASURE_TYPE_CODE == "LDF"]
gc()
rm(list = ls())
# Clears the environment
rm(list = ls())
# To avoid switch to scientific notation
options(scipen = 9999)
# Load libraries
source("90_LIBS.R")
source("91_TABLEFORMAT_FUNCTION.R")
source("92_STANDARD_SIZE_DATASET_FORMAT_CONVERTER.R")
# Define species of interest
CODE_SPECIES_SELECTED = 'BET'
# Define connection to postgres version of the code list database
C_REFERENCE_DATA =
DBI::dbConnect(drv = RPostgres::Postgres(),
host = Sys.getenv("IOTC_REFERENCE_DATA_DB_SERVER"),
dbname = 'IOTC_ReferenceData_2025_07_23',
port = 5432,
user = Sys.getenv("IOTC_REFERENCE_DATA_DB_USER"),
password = Sys.getenv("IOTC_REFERENCE_DATA_DB_PWD")
)
# Load scripts
source("01_CL_EXTRACTION.R")
source("02_SF_DATA_EXTRACTION.R")
source("03_SF_DATA_PROCESSING.R")
FL_STD_DATA_SPECIES[(CLASS_LOW + CLASS_HIGH)/2 > CL_SIZE_REC_TABLE$MAX_MEASUREMENT, .(N = sum(FISH_COUNT)), keyby = .(FLEET_CODE, GEAR_CODE)]
FL_YFT_SYC_FLL = FL_STD_DATA_SPECIES[FLEET_CODE == "SYC" & GEAR_CODE == "ELL", .(N = sum(FISH_COUNT)), keyby = .(YEAR, CLASS_LOW, CLASS_HIGH)]
FL_YFT_SYC_FLL
FL_YFT_SYC_FLL[, CLASS_MID := (CLASS_LOW + CLASS_HIGH)/2]
ggplot(FL_YFT_SYC_FLL, aes(x = CLASS_MID, y = N)) +
geom_line(linewidth = 1) +
xlab("Fork length (cm)") + ylab("Samples") +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size=10),
strip.text.x = element_text(size = 10),
plot.margin = margin(.2, .3, .1, 0, "cm"),
legend.position = "none",
legend.title = element_blank()) +
#coord_cartesian(xlim = c(50, 200)) +
theme(strip.background = element_rect(fill = "white")) +
facet_wrap(~YEAR, scales = "free_y")
FL = FL_STD_DATA_SPECIES[FLEET_CODE == "SYC" & GEAR_CODE == "FLL", .(N = sum(FISH_COUNT)), keyby = .(YEAR, CLASS_LOW, CLASS_HIGH)]
FL[, CLASS_MID := (CLASS_LOW + CLASS_HIGH)/2]
ggplot(FL, aes(x = CLASS_MID, y = N)) +
geom_line(linewidth = 1) +
xlab("Fork length (cm)") + ylab("Samples") +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size=10),
strip.text.x = element_text(size = 10),
plot.margin = margin(.2, .3, .1, 0, "cm"),
legend.position = "none",
legend.title = element_blank()) +
#coord_cartesian(xlim = c(50, 200)) +
theme(strip.background = element_rect(fill = "white")) +
facet_wrap(~YEAR, scales = "free_y")
FL = FL_STD_DATA_SPECIES[FLEET_CODE == "SYC" & GEAR_CODE == "LLL", .(N = sum(FISH_COUNT)), keyby = .(YEAR, CLASS_LOW, CLASS_HIGH)]
FL[, CLASS_MID := (CLASS_LOW + CLASS_HIGH)/2]
ggplot(FL, aes(x = CLASS_MID, y = N)) +
geom_line(linewidth = 1) +
xlab("Fork length (cm)") + ylab("Samples") +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size=10),
strip.text.x = element_text(size = 10),
plot.margin = margin(.2, .3, .1, 0, "cm"),
legend.position = "none",
legend.title = element_blank()) +
theme(strip.background = element_rect(fill = "white")) +
facet_wrap(~YEAR, scales = "free_y")
FL = FL_STD_DATA_SPECIES[FLEET_CODE == "SYC" & GEAR_CODE == "LL", .(N = sum(FISH_COUNT)), keyby = .(YEAR, CLASS_LOW, CLASS_HIGH)]
FL[, CLASS_MID := (CLASS_LOW + CLASS_HIGH)/2]
ggplot(FL, aes(x = CLASS_MID, y = N)) +
geom_line(linewidth = 1) +
xlab("Fork length (cm)") + ylab("Samples") +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size=10),
strip.text.x = element_text(size = 10),
plot.margin = margin(.2, .3, .1, 0, "cm"),
legend.position = "none",
legend.title = element_blank()) +
theme(strip.background = element_rect(fill = "white")) +
facet_wrap(~YEAR, scales = "free_y")
SF_RAW_DATA_SPECIES[YEAR == 2010 & FLEET_CODE == "SYC" & GEAR_CODE == "LL"]
SF_RAW_DATA_SPECIES[YEAR == 2010 & FLEET_CODE == "SYC" & GEAR_CODE == "LL", .(FISH_COUNT = sum(FISH_COUNT)), keyby = .(MEASURE_TYPE_CODE)]
SF_FishSmallerThanMinimum = FL_STD_DATA_SPECIES[(CLASS_LOW + CLASS_HIGH)/2 < CL_SIZE_REC_TABLE$MIN_MEASUREMENT]
SF_FishSmallerThanMinimum[1:2]
SF_FishSmallerThanMinimum
CL_SIZE_REC_TABLE$MIN_MEASUREMENT
SF_FishSmallerThanMinimum = SF_RAW_DATA_SPECIES[MEASURE_TYPE_CODE %in% c("FL", "FLB", "FLC", "FLCT", "FLUT"), (CLASS_LOW + CLASS_HIGH)/2 < CL_SIZE_REC_TABLE$MIN_MEASUREMENT]
SF_FishSmallerThanMinimum
SF_FishSmallerThanMinimum = SF_RAW_DATA_SPECIES[MEASURE_TYPE_CODE %in% c("FL", "FLB", "FLC", "FLCT", "FLUT") & (CLASS_LOW + CLASS_HIGH)/2 < CL_SIZE_REC_TABLE$MIN_MEASUREMENT]
SF_FishSmallerThanMinimum
View(FL_STD_DATA_SPECIES)
SF_RAW_DATA_SPECIES[(CLASS_LOW + CLASS_HIGH)/2 < CL_SIZE_REC_TABLE$MIN_MEASUREMENT, .(N = sum(FISH_COUNT)), keyby = .(FLEET_CODE, GEAR_CODE)]
SF_FishSmallerThanMinimum = SF_RAW_DATA_SPECIES[FLEET_CODE == "JPN" & MEASURE_TYPE_CODE %in% c("FL", "FLB", "FLC", "FLCT", "FLUT") & (CLASS_LOW + CLASS_HIGH)/2 < CL_SIZE_REC_TABLE$MIN_MEASUREMENT]
SF_RAW_DATA_SPECIES[FLEET_CODE == "JPN" & MEASURE_TYPE_CODE %in% c("FL", "FLB", "FLC", "FLCT", "FLUT") & (CLASS_LOW + CLASS_HIGH)/2 < CL_SIZE_REC_TABLE$MIN_MEASUREMENT]
SF_RAW_DATA_SPECIES[(CLASS_LOW + CLASS_HIGH)/2 < CL_SIZE_REC_TABLE$MIN_MEASUREMENT, .(N = sum(FISH_COUNT)), keyby = .(FLEET_CODE, GEAR_CODE, YEAR)]
SF_RAW_DATA_SPECIES[FLEET_CODE == "JPN" & YEAR == 1965]
SF_RAW_DATA_SPECIES[FLEET_CODE == "JPN" & YEAR == 1965, .(FISH_COUNT = sum(FISH_COUNT)), keyby = .(MEASURE_TYPE_CODE)]
SF_RAW_DATA_SPECIES[FLEET_CODE == "JPN" & YEAR == 1965, .(FISH_COUNT = sum(FISH_COUNT)), keyby = .(FLEET_CODE, MEASURE_TYPE_CODE, MEASURE_TYPE, FISHING_GROUND)]
SF_RAW_DATA_SPECIES[FLEET_CODE == "JPN" & YEAR == 1965, .(FISH_COUNT = sum(FISH_COUNT)), keyby = .(FLEET_CODE, MEASURE_TYPE_CODE, MEASURE_TYPE, FISHING_GROUND_CODE)]
SF_RAW_DATA_SPECIES[FLEET_CODE == "JPN" & YEAR == 1965, .(FISH_COUNT = sum(FISH_COUNT)), keyby = .(FLEET_CODE, ISHING_GROUND_CODE, MEASURE_TYPE_CODE)]
SF_RAW_DATA_SPECIES[FLEET_CODE == "JPN" & YEAR == 1965, .(FISH_COUNT = sum(FISH_COUNT)), keyby = .(FLEET_CODE, FISHING_GROUND_CODE, MEASURE_TYPE_CODE)]
SF_RAW_DATA_SPECIES[FLEET_CODE == "JPN" & YEAR == 1965 & FISHING_GROUND_CODE == "A220100"]
SF_RAW_DATA_SPECIES[FLEET_CODE == "JPN" & YEAR == 1965 & FISHING_GROUND_CODE == "A220100", .(FISH_COUNT = sum(FISH_COUNT)), keyby = .(MEASURE_TYPE_CODE)]
FL = SF_RAW_DATA_SPECIES[FLEET_CODE == "JPN" & GEAR_CODE == "LL" & YEAR == 1965 & MEASURE_TYPE_CODE == "FL", .(N = sum(FISH_COUNT)), keyby = .(YEAR, CLASS_LOW, CLASS_HIGH)]
FL
FL[, CLASS_MID := (CLASS_LOW + CLASS_HIGH)/2]
ggplot(FL, aes(x = CLASS_MID, y = N)) +
geom_line(linewidth = 1) +
xlab("Fork length (cm)") + ylab("Samples") +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size=10),
strip.text.x = element_text(size = 10),
plot.margin = margin(.2, .3, .1, 0, "cm"),
legend.position = "none",
legend.title = element_blank()) +
theme(strip.background = element_rect(fill = "white")) +
facet_wrap(~YEAR, scales = "free_y")
FL_STD = FL_STD_DATA_SPECIES[FLEET_CODE == "JPN" & GEAR_CODE == "LL" & YEAR == 1965 & FISHING_GROUND_CODE == "A220100"]
FL_STD
FL_STD[, sum(FISH_COUNT)]
SF_RAW_DATA_SPECIES[FLEET_CODE == "JPN" & YEAR == 1965 & FISHING_GROUND_CODE == "A220100", .(FISH_COUNT = sum(FISH_COUNT)), keyby = .(MEASURE_TYPE_CODE)]
FL = FL_STD_DATA_SPECIES[FLEET_CODE == "JPN" & GEAR_CODE == "LL" & YEAR == 1965 & FISHING_GROUND_CODE == "A220100"]
FL = FL_STD_DATA_SPECIES[FLEET_CODE == "JPN" & GEAR_CODE == "LL" & YEAR == 1965 & FISHING_GROUND_CODE == "A220100"]
FL[, CLASS_MID := (CLASS_LOW + CLASS_HIGH)/2]
ggplot(FL, aes(x = CLASS_MID, y = N)) +
geom_line(linewidth = 1) +
xlab("Fork length (cm)") + ylab("Samples") +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size=10),
strip.text.x = element_text(size = 10),
plot.margin = margin(.2, .3, .1, 0, "cm"),
legend.position = "none",
legend.title = element_blank()) +
theme(strip.background = element_rect(fill = "white")) +
facet_wrap(~YEAR, scales = "free_y")
FL = FL_STD_DATA_SPECIES[FLEET_CODE == "JPN" & GEAR_CODE == "LL" & YEAR == 1965 & FISHING_GROUND_CODE == "A220100", .(N = sum(FISH_COUNT)), keyby = .(YEAR, CLASS_LOW, CLASS_HIGH)]
FL[, CLASS_MID := (CLASS_LOW + CLASS_HIGH)/2]
ggplot(FL, aes(x = CLASS_MID, y = N)) +
geom_line(linewidth = 1) +
xlab("Fork length (cm)") + ylab("Samples") +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size=10),
strip.text.x = element_text(size = 10),
plot.margin = margin(.2, .3, .1, 0, "cm"),
legend.position = "none",
legend.title = element_blank()) +
theme(strip.background = element_rect(fill = "white")) +
facet_wrap(~YEAR, scales = "free_y")
SF_RAW = SF_RAW_DATA_SPECIES[FLEET_CODE == "JPN" & GEAR_CODE == "LL" & YEAR == 1965 & FISHING_GROUND_CODE == "A220100", .(N = sum(FISH_COUNT)), keyby = .(YEAR, CLASS_LOW, CLASS_HIGH)]
SF_RAW_DATA_SPECIES[FLEET_CODE == "JPN" & GEAR_CODE == "LL" & YEAR == 1965 & FISHING_GROUND_CODE == "A220100", .(N = sum(FISH_COUNT)), keyby = .(YEAR, CLASS_LOW, CLASS_HIGH)]
SF_RAW = SF_RAW_DATA_SPECIES[FLEET_CODE == "JPN" & GEAR_CODE == "LL" & YEAR == 1965 & FISHING_GROUND_CODE == "A220100", .(N = sum(FISH_COUNT)), keyby = .(MEASURE_TYPE_CODE)]
SF_RAW
SF_RAW = SF_RAW_DATA_SPECIES[MEASURE_TYPE_CODE == "FL" & FLEET_CODE == "JPN" & GEAR_CODE == "LL" & YEAR == 1965 & FISHING_GROUND_CODE == "A220100"]
SF_RAW
# Sample of 405 measured in fork length
FL_RAW = SF_RAW_DATA_SPECIES[MEASURE_TYPE_CODE == "FL" & FLEET_CODE == "JPN" & GEAR_CODE == "LL" & YEAR == 1965 & FISHING_GROUND_CODE == "A220100"]
FL_RAW
# Sample of 405 measured in fork length
FL = SF_RAW_DATA_SPECIES[MEASURE_TYPE_CODE == "FL" & FLEET_CODE == "JPN" & GEAR_CODE == "LL" & YEAR == 1965 & FISHING_GROUND_CODE == "A220100"]
FL[, CLASS_MID := (CLASS_LOW + CLASS_HIGH)/2]
summary(FL$CLASS_MID)
FL = FL_STD_DATA_SPECIES[FLEET_CODE == "JPN" & GEAR_CODE == "LL" & YEAR == 1965 & FISHING_GROUND_CODE == "A220100", .(N = sum(FISH_COUNT)), keyby = .(YEAR, CLASS_LOW, CLASS_HIGH)]
FL[, CLASS_MID := (CLASS_LOW + CLASS_HIGH)/2]
summary(FL$CLASS_MID)
SF_RAW[MEASURE_TYPE_CODE == "WR"]
setwd("C:/Users/echassot/OneDrive - Food and Agriculture Organization/IOTC/MEETINGS/2025/202506_WPTT27/AS/data")
# Libraries
library(this.path)
# Set the Working Directory
setwd(here())
# Read the data
path_inputs = "Z:/03_Data/05_Data_processing/03_Data_raising/01_Catch_data_SA/SA/CAS/BET/WPTT27_DP/CAS_ProcessINPUTTAB.mdb"
# Read the data
path_inputs = "Z:/03_Data/05_Data_processing/03_Data_raising/01_Catch_data_SA/SA/CAS/BET/WPTT27_AS/CAS_ProcessINPUTTAB.mdb"
path_outputs = "Z:/03_Data/05_Data_processing/03_Data_raising/01_Catch_data_SA/SA/CAS/BET/WPTT27_AS/CAS_ProcessOUTPUTTAB.mdb"
con_inputs  = odbcConnectAccess2007(path_inputs)
# Libraries
library(this.path)
library(RODBC, quietly = TRUE)0
library(RODBC, quietly = TRUE)
library(iotc.base.common.plots, quietly = TRUE)
theme_set(theme_bw())
initialize_all_gears_colors()
initialize_all_species_colors()
con_inputs  = odbcConnectAccess2007(path_inputs)
con_outputs = odbcConnectAccess2007(path_outputs)
RC_bse    = as.data.table(sqlFetch(con_inputs, "FINAL_TABLE_NC"))[Species == "BET"]
CELL      = as.data.table(sqlFetch(con_outputs, "CELL"))[Species == "BET"]
# Read the data
path_inputs = "Z:/03_Data/05_Data_processing/03_Data_raising/01_Catch_data_SA/SA/CAS/BET/WPTT27_AS/CAS_Process.mdb"
con_inputs  = odbcConnectAccess2007(path_inputs)
closeAllConnections()
closeAllConnections()
# Read the data
path_inputs = "Z:/03_Data/05_Data_processing/03_Data_raising/01_Catch_data_SA/SA/CAS/BET/WPTT27_AS/CAS_Process.mdb"
con_inputs  = odbcConnectAccess2007(path_inputs)
RC_bse    = as.data.table(sqlFetch(con_inputs, "FINAL_TABLE_NC"))[Species == "BET"]
CELL      = as.data.table(sqlFetch(con_outputs, "CELL"))[Species == "BET"]
CELL      = as.data.table(sqlFetch(con_inputs, "CELL"))[Species == "BET"]
CEOTHR    = as.data.table(sqlFetch(con_inputs, "CEOTHR"))[Species == "BET"]
CEPSBB    = as.data.table(sqlFetch(con_inputs, "CEPSBB"))[Species == "BET"]
CEOTHR    = as.data.table(sqlFetch(con_inputs, "CEOTHR"))
CEPSBB    = as.data.table(sqlFetch(con_inputs, "CEPSBB"))
CELL      = as.data.table(sqlFetch(con_inputs, "CELL"))
names(CELL )
names(RC)
RC        = as.data.table(sqlFetch(con_inputs, "FINAL_TABLE_NC"))
names(RC)
