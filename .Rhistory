# Clears the environment
rm(list = ls())
# To avoid switch to scientific notation
options(scipen = 100)
# Load libraries
source("90_LIBS.R")
setwd("C:/Users/echassot/Desktop/repositories/data-processing/iotc-sf-data-processing")
# Load libraries
source("90_LIBS.R")
source("91_TABLEFORMAT_FUNCTION.R")
setwd("C:/Users/echassot/Desktop/repositories/data-processing/iotc-sf-data-processing/initialisation")
# Load libraries
source("90_LIBS.R")
source("91_TABLEFORMAT_FUNCTION.R")
source("92_STANDARD_SIZE_DATASET_FORMAT_CONVERTER.R")
source("92_STANDARD_SIZE_DATASET_FORMAT_CONVERTER.R")
source("93_DATABASE_CONNECTIONS.R")
DB_IOTC_MASTER()
# Database connection
C_MASTER =
DBI::dbConnect(
drv      = odbc::odbc(),
Driver   = "SQL Server",
Server   = "IOTCS09",
Database = "IOTC_master",
UID      = "rlibs_user",
PWD      = "rlibs_user",
encoding = "CP1252",
clientcharset = "UTF-8"
)
C_MASTER
# RECOMMENDED MEASUREMENTS ####
PARAMS_SF = fread(input = "https://data.iotc.org/reference/latest/domain/biology/codelists/RECOMMENDED_MEASUREMENTS_1.0.0.csv")
PARAMS_SF[1]
SA_AREAS_CONFIG = data.table(
IOTC_CODE  = c("IRALB01", "IRALB02", "IRALB03", "IRALB04"),
AREA_CODE  = c("A1", "A2", "A3", "A4"),
NAME_SHORT = c("Northwest",
"Northeast",
"Southwest",
"Southeast")
)
SA_AREAS_CONFIG
SA_AREAS_CONFIG[, AREA_NAME := paste0(AREA_CODE, " - ", NAME_SHORT)]
SA_AREAS_CONFIG
# Load scripts for metadata
SELECTED_SPECIES_CODE = 'ALB'
PARAMS_SF[1]
# Load scripts for metadata
SelectedSpeciesCode = 'ALB'
# Recommended measurements ####
SF_Params = fread(input = "https://data.iotc.org/reference/latest/domain/biology/codelists/RECOMMENDED_MEASUREMENTS_1.0.0.csv")[SPECIES_CODE == SelectedSpeciesCode]
SF_Params
DEFAULT_IOTC_LL_EQUATIONS[SPECIES == SelectedSpeciesCode]
DEFAULT_IOTC_L"_EQUATIONS[SPECIES == SelectedSpeciesCode]
DEFAULT_IOTC_LW_EQUATIONS[SPECIES == SelectedSpeciesCode]
SF_lw_Params = DEFAULT_IOTC_LW_EQUATIONS[SPECIES == SelectedSpeciesCode]
SF_ll_Params = DEFAULT_IOTC_L_EQUATIONS[SPECIES == SelectedSpeciesCode]
SF_lw_Params
SF_ll_Params = DEFAULT_IOTC_LL_EQUATIONS[SPECIES == SelectedSpeciesCode]
SF_lw_Params = DEFAULT_IOTC_LW_EQUATIONS[SPECIES == SelectedSpeciesCode]
SF_lw_Params
SelectedSpeciesCode
paste0("SELECT
CODE,
NAME_EN,
NAME_FR,
OCEAN_AREA_KM2 AS OCEAN_AREA,
OCEAN_AREA_IO_KM2 AS IO_AREA,
OCEAN_AREA_IOTC_KM2 AS IOTC_AREA,
CENTER_LAT,
CENTER_LON,
AREA_GEOMETRY.STAsText() AS WKT
FROM
refs_gis.V_IO_STOCK_ASSESSMENT_AREAS
WHERE SUBSTRING(CODE, 3, 5) = ", SelectedSpeciesCode)
paste0("SELECT
CODE,
NAME_EN,
NAME_FR,
OCEAN_AREA_KM2 AS OCEAN_AREA,
OCEAN_AREA_IO_KM2 AS IO_AREA,
OCEAN_AREA_IOTC_KM2 AS IOTC_AREA,
CENTER_LAT,
CENTER_LON,
AREA_GEOMETRY.STAsText() AS WKT
FROM
refs_gis.V_IO_STOCK_ASSESSMENT_AREAS
WHERE SUBSTRING(CODE, 3, 5) = \'", SelectedSpeciesCode, "\'")
# Stock-specific area parameters
popo = query(DB_IOTC_MASTER(), paste0("SELECT
CODE,
NAME_EN,
NAME_FR,
OCEAN_AREA_KM2 AS OCEAN_AREA,
OCEAN_AREA_IO_KM2 AS IO_AREA,
OCEAN_AREA_IOTC_KM2 AS IOTC_AREA,
CENTER_LAT,
CENTER_LON,
AREA_GEOMETRY.STAsText() AS WKT
FROM
refs_gis.V_IO_STOCK_ASSESSMENT_AREAS
WHERE SUBSTRING(CODE, 3, 5) = \'", SelectedSpeciesCode, "\'"))
popo
wrieLines(paste0("SELECT
CODE,
NAME_EN,
NAME_FR,
OCEAN_AREA_KM2 AS OCEAN_AREA,
OCEAN_AREA_IO_KM2 AS IO_AREA,
OCEAN_AREA_IOTC_KM2 AS IOTC_AREA,
CENTER_LAT,
CENTER_LON,
AREA_GEOMETRY.STAsText() AS WKT
FROM
refs_gis.V_IO_STOCK_ASSESSMENT_AREAS
WHERE SUBSTRING(CODE, 3, 5) = \'", SelectedSpeciesCode, "\'"))
writeLines(paste0("SELECT
CODE,
NAME_EN,
NAME_FR,
OCEAN_AREA_KM2 AS OCEAN_AREA,
OCEAN_AREA_IO_KM2 AS IO_AREA,
OCEAN_AREA_IOTC_KM2 AS IOTC_AREA,
CENTER_LAT,
CENTER_LON,
AREA_GEOMETRY.STAsText() AS WKT
FROM
refs_gis.V_IO_STOCK_ASSESSMENT_AREAS
WHERE SUBSTRING(CODE, 3, 5) = \'", SelectedSpeciesCode, "\'"))
# Stock-specific area parameters
popo = query(DB_IOTC_MASTER(), paste0("SELECT
CODE,
NAME_EN,
NAME_FR,
OCEAN_AREA_KM2 AS OCEAN_AREA,
OCEAN_AREA_IO_KM2 AS IO_AREA,
OCEAN_AREA_IOTC_KM2 AS IOTC_AREA,
CENTER_LAT,
CENTER_LON,
AREA_GEOMETRY.STAsText() AS WKT
FROM
refs_gis.V_IO_STOCK_ASSESSMENT_AREAS
WHERE SUBSTRING(CODE, 4, 3) = \'", SelectedSpeciesCode, "\'")
)
popo[1]
popo$CODE
SA_AREAS_ALB = query(DB_IOTC_MASTER(), "SELECT
CODE,
NAME_EN,
NAME_FR,
OCEAN_AREA_KM2 AS OCEAN_AREA,
OCEAN_AREA_IO_KM2 AS IO_AREA,
OCEAN_AREA_IOTC_KM2 AS IOTC_AREA,
CENTER_LAT,
CENTER_LON,
AREA_GEOMETRY.STAsText() AS WKT
FROM
refs_gis.V_IO_STOCK_ASSESSMENT_AREAS
WHERE SUBSTRING(CODE, 4, 3) = 'ALB'"
)
SA_AREAS_ALB_SF = st_as_sf(SA_AREAS_ALB, wkt = "WKT", crs = set_crs(4326))
SA_AREAS_ALB_SF = st_as_sf(SA_AREAS_ALB, wkt = "WKT", crs = st_crs(4326))
SA_AREAS_ALB = query(DB_IOTC_MASTER(), "SELECT
CODE,
NAME_EN,
NAME_FR,
OCEAN_AREA_KM2 AS OCEAN_AREA,
OCEAN_AREA_IO_KM2 AS IO_AREA,
OCEAN_AREA_IOTC_KM2 AS IOTC_AREA,
CENTER_LAT,
CENTER_LON,
AREA_GEOMETRY.STAsText() AS WKT
FROM
refs_gis.V_IO_STOCK_ASSESSMENT_AREAS
WHERE SUBSTRING(CODE, 4, 3) = 'ALB'
AND SUBSTRING(CODE, 8, 3) NOT LIKE 'ALT'"
)
SA_AREAS_ALB_SF = st_as_sf(SA_AREAS_ALB, wkt = "WKT", crs = st_crs(4326))
plot(SA_AREAS_ALB_SF["CODE"])
LW_EQ = data.table(FISHERY_TYPE = c("PSPLGI", "LLOT"), # Different equations For PS / PL / GI and LL / OT
A = c(0.0000569070, 0.0000569070),
B = c(2.7514000000, 2.7514000000),
M = c(1.0000000000, 1.0000000000)) # No diffs between gears in ALB L-W equations
LW_EQ
SF_lw_Params = DEFAULT_IOTC_LW_EQUATIONS[SPECIES == "ALB"]
SF_lw_Params
LW_EQ = SF_lw_Params[, .(FISHERY_TYPE = GEAR_TYPE, A, B, M = C)]
LW_EQ
NC_est(fleet_codes = "SYC", fishery_code = "LLD")][, range(YEAR)]
NC_est(fleet_codes = "SYC", fishery_code = "LLD")[, range(YEAR)]
setwd(this.path::here)
setwd(this.path::here())
# Map legacy IOTDB codes to new codes
LEGACY_NEW_IRREGULAR_AREAS_MAPPING = fread("../inputs/mappings/MAPPING_SF_IRREGULAR_AREAS_IOTDB_MASTER.csv", colClasses = c("character", "character"))
LEGACY_NEW_IRREGULAR_AREAS_MAPPING
# Load scripts for metadata
CODE_SPECIES_SELECTED = 'ALB'
# Extract the raw size data
SF_RAW_DATA_SPECIES = SF_raw(species_code = CODE_SPECIES_SELECTED)
# Save legacy fishing ground
setnames(SF_RAW_DATA_SPECIES, old = "FISHING_GROUND_CODE", new = "LEGACY_FISHING_GROUND_CODE")
# Update fishing ground codes for non-regular areas (from IOTCStatistics to IOTC_Master)
SF_RAW_DATA_SPECIES = merge(SF_RAW_DATA_SPECIES, LEGACY_NEW_IRREGULAR_AREAS_MAPPING, by.x = "LEGACY_FISHING_GROUND_CODE", by.y = "LEGACY_FISHING_GROUND_CODE", all.x = TRUE)
# Keep regular fishing grounds
SF_RAW_DATA_SPECIES[substring(LEGACY_FISHING_GROUND_CODE, 1, 1) %in% c("5", "6") & is.na(FISHING_GROUND_CODE), FISHING_GROUND_CODE := LEGACY_FISHING_GROUND_CODE]
SF_RAW_DATA_SPECIES[1:2]
# Remove legacy fishing grounds
SF_RAW_DATA_SPECIES[, LEGACY_FISHING_GROUND_CODE := NULL]
# Merge with regular grids 1x1 and 5x5 to identify data not consistent with expected reporting
IO_SF_GRID_LIST = query(DB_IOTC_MASTER(), "SELECT DISTINCT CODE, NAME_EN FROM refs_gis.V_IO_GRIDS_CE_SF;")
REG_GRIDS_NOT_IN_IO = unique(merge(SF_RAW_DATA_SPECIES[substring(FISHING_GROUND_CODE, 1, 1) %in% c("5", "6")], IO_SF_GRID_LIST, by.x = "FISHING_GROUND_CODE", by.y = "CODE", all.x = TRUE)[is.na(NAME_EN), .(FISHING_GROUND_CODE)])[order(FISHING_GROUND_CODE)]
REG_GRIDS_NOT_IN_IO
# Remove data for these grids
SF_RAW_DATA_SPECIES_NOT_IO = SF_RAW_DATA_SPECIES[FISHING_GROUND_CODE %in% REG_GRIDS_NOT_IN_IO$FISHING_GROUND_CODE]
SF_RAW_DATA_SPECIES_NOT_IO[, .N]
SF_RAW_DATA_SPECIES_NOT_IO[1]
# Standardise the size data
FL_STD_DATA_SPECIES = standardize.SF(SF_RAW_DATA_SPECIES)[, .(FLEET_CODE, YEAR, MONTH_START, MONTH_END, FISHING_GROUND_CODE, GEAR_CODE, SCHOOL_TYPE_CODE, SPECIES_CODE, MEASURE_TYPE_CODE, RAISE_CODE, CLASS_LOW, CLASS_HIGH, FISH_COUNT)]
METADATA_SIZE_STANDARDS_TABLE = fread(input = "https://data.iotc.org/reference/latest/domain/biology/codelists/RECOMMENDED_MEASUREMENTS_1.0.0.csv")[SPECIES_CODE == CODE_SPECIES_SELECTED][, .(`Type of measurement code` = TYPE_OF_MEASUREMENT_CODE, `Measurement code` = MEASUREMENT_CODE, `Default measurement interval` = DEFAULT_MEASUREMENT_INTERVAL, `Maximum measurement interval` = MAX_MEASUREMENT_INTERVAL, `Minimum size` = MIN_MEASUREMENT, `Maximum size` = MAX_MEASUREMENT)]
METADATA_SIZE_STANDARDS_TABLE
CL_FISHING_GROUNDS[1:2]
CL_SIZE_REC = fread(input = "https://data.iotc.org/reference/latest/domain/biology/codelists/RECOMMENDED_MEASUREMENTS_1.0.0.csv")[SPECIES_CODE == CODE_SPECIES_SELECTED][, .(`Type of measurement code` = TYPE_OF_MEASUREMENT_CODE, `Measurement code` = MEASUREMENT_CODE, `Default measurement interval` = DEFAULT_MEASUREMENT_INTERVAL, `Maximum measurement interval` = MAX_MEASUREMENT_INTERVAL, `Minimum size` = MIN_MEASUREMENT, `Maximum size` = MAX_MEASUREMENT)]
# Add measurement unit
CL_SIZE_REC[, `Measurement unit` := "cm"]
setcolorder(CL_SIZE_REC, neworder = c(1, 2, 7, 3, 4, 5, 6))
CL_SIZE_REC = data.frame(as.data.table(t(CL_SIZE_REC), keep.rownames = TRUE))
names(METADATA_SIZE_STANDARDS) = c("", "")
CL_SIZE_REC = fread(input = "https://data.iotc.org/reference/latest/domain/biology/codelists/RECOMMENDED_MEASUREMENTS_1.0.0.csv")[SPECIES_CODE == CODE_SPECIES_SELECTED][, .(`Type of measurement code` = TYPE_OF_MEASUREMENT_CODE, `Measurement code` = MEASUREMENT_CODE, `Default measurement interval` = DEFAULT_MEASUREMENT_INTERVAL, `Maximum measurement interval` = MAX_MEASUREMENT_INTERVAL, `Minimum size` = MIN_MEASUREMENT, `Maximum size` = MAX_MEASUREMENT)]
# Add measurement unit
CL_SIZE_REC[, `Measurement unit` := "cm"]
setcolorder(CL_SIZE_REC, neworder = c(1, 2, 7, 3, 4, 5, 6))
CL_SIZE_REC = data.frame(as.data.table(t(CL_SIZE_REC), keep.rownames = TRUE))
names(CL_SIZE_REC) = c("", "")
CL_SIZE_REC
## Recommended Size Measurements
CL_SIZE_REC_TABLE = fread(input = "https://data.iotc.org/reference/latest/domain/biology/codelists/RECOMMENDED_MEASUREMENTS_1.0.0.csv")[SPECIES_CODE == CODE_SPECIES_SELECTED]
CL_SIZE_REC = CL_SIZE_REC_TABLE[, .(`Type of measurement code` = TYPE_OF_MEASUREMENT_CODE, `Measurement code` = MEASUREMENT_CODE, `Default measurement interval` = DEFAULT_MEASUREMENT_INTERVAL, `Maximum measurement interval` = MAX_MEASUREMENT_INTERVAL, `Minimum size` = MIN_MEASUREMENT, `Maximum size` = MAX_MEASUREMENT)]
# Add measurement unit
CL_SIZE_REC[, `Measurement unit` := "cm"]
setcolorder(CL_SIZE_REC, neworder = c(1, 2, 7, 3, 4, 5, 6))
CL_SIZE_REC = data.frame(as.data.table(t(CL_SIZE_REC), keep.rownames = TRUE))
CL_SIZE_REC
# Code lists restricted to the standardised dataset
CL_SPECIES = query(DB_IOTC_MASTER(), query = paste0("SELECT CODE AS SPECIES_CODE, NAME_EN AS SPECIES FROM refs_biological.SPECIES WHERE CODE = \'", CODE_SPECIES_SELECTED, "\';"))
CL_FLEETS = query(DB_IOTC_MASTER(), query = "SELECT DISTINCT FLEET_CODE, NAME_EN, NAME_FR FROM refs_legacy.FLEETS;")[FLEET_CODE %in% unique(FL_STD_DATA_SPECIES$FLEET_CODE)]
CL_FISHING_GROUNDS = query(DB_IOTC_MASTER(), query = "SELECT CODE AS FISHING_GROUND_CODE, LABEL_EN AS DESCRIPTION_EN, LABEL_FR AS DESCRIPTION_FR, AREA_TYPE_CODE FROM refs_gis.AREAS")[FISHING_GROUND_CODE %in% unique(FL_STD_DATA_SPECIES$FISHING_GROUND_CODE)]
CL_GEARS = query(DB_IOTC_MASTER(), query = "SELECT DISTINCT CODE AS GEAR_CODE, NAME_EN, NAME_FR FROM refs_legacy.GEARS;")[GEAR_CODE %in% unique(FL_STD_DATA_SPECIES$GEAR_CODE)]
CL_SCHOOL_TYPES = query(DB_IOTC_MASTER(), query = "SELECT DISTINCT CODE AS CATCH_SCHOOL_TYPE_CODE, NAME_EN, NAME_FR FROM refs_legacy.SCHOOL_TYPES;")[CATCH_SCHOOL_TYPE_CODE %in% unique(FL_STD_DATA_SPECIES$SCHOOL_TYPE_CODE)]
CL_RAISINGS = query(DB_IOTC_MASTER(), query = "SELECT DISTINCT CODE AS RAISING_CODE, NAME_EN, NAME_FR FROM refs_legacy.RAISINGS;")
CL_MEASUREMENTS = query(DB_IOTC_MASTER(), query = "SELECT DISTINCT CODE AS MEASUREMENT_CODE, NAME_EN, DESCRIPTION_EN, NAME_FR, DESCRIPTION_FR FROM refs_biological.MEASUREMENTS WHERE CODE IN ('FL', 'LJ');")
# Trick to aggregate all sex in table
SF_RAW_DATA_SPECIES[, SEX_CODE := "UNCL"]
# Standardise and pivot the raw size data
# Sex excluded
FL_STD_DATA_SPECIES_TABLE = standardize_and_pivot_size_frequencies(SF_RAW_DATA_SPECIES, keep_sex_and_raise_code = TRUE)[, -c("SEX_CODE", "AVG_WEIGHT")]
# Extract reporting quality
FL_REPORTING_QUALITY_SPECIES = data_quality(species_code = CODE_SPECIES_SELECTED)
# Add reporting quality to the data in wide format
FL_STD_DATA_SPECIES_TABLE = merge(FL_STD_DATA_SPECIES_TABLE, FL_REPORTING_QUALITY_SPECIES[, .(FLEET_CODE, YEAR, GEAR_CODE, SPECIES_CODE, REPORTING_QUALITY = SF)], by.x = c("YEAR", "FLEET_CODE", "GEAR_CODE", "SPECIES_CODE"), by.y = c("YEAR", "FLEET_CODE", "GEAR_CODE", "SPECIES_CODE"), all.x = TRUE)
# Reorder to put RAISE_CODE and REPORTING_QUALITY at the end of the fields
setcolorder(FL_STD_DATA_SPECIES_TABLE, neworder = c("FLEET_CODE", "YEAR", "MONTH_START", "MONTH_END", "FISHING_GROUND_CODE", "GEAR_CODE", "SCHOOL_TYPE_CODE", "SPECIES_CODE", "MEASURE_TYPE_CODE", "FIRST_CLASS_LOW", "SIZE_INTERVAL", "NO_FISH", "KG_FISH", "RAISE_CODE", "REPORTING_QUALITY"))
# Add reporting quality to the data in melted format
FL_STD_DATA_SPECIES = merge(FL_STD_DATA_SPECIES, FL_REPORTING_QUALITY_SPECIES[, .(FLEET_CODE, YEAR, GEAR_CODE, SPECIES_CODE, REPORTING_QUALITY = SF)], by.x = c("YEAR", "FLEET_CODE", "GEAR_CODE", "SPECIES_CODE"), by.y = c("YEAR", "FLEET_CODE", "GEAR_CODE", "SPECIES_CODE"), all.x = TRUE)
# Reorder to put RAISE_CODE and REPORTING_QUALITY at the end of the fields
setcolorder(FL_STD_DATA_SPECIES, neworder = c("FLEET_CODE", "YEAR", "MONTH_START", "MONTH_END", "FISHING_GROUND_CODE", "GEAR_CODE", "SCHOOL_TYPE_CODE", "SPECIES_CODE", "MEASURE_TYPE_CODE", "CLASS_LOW", "CLASS_HIGH", "FISH_COUNT", "RAISE_CODE", "REPORTING_QUALITY"))
FL_STD_DATA_SPECIES[1:2]
FL_STD_DATA_SPECIES[, .N, .(REPORTING_QUALITY)]
FL_STD_DATA_SPECIES[is.na(REPORTING_QUALITY)]
FL_STD_DATA_SPECIES[is.na(REPORTING_QUALITY), .(N = sum(COUNT)), keyby = .(YEAR, FLEET_CODE, FISHERY_CODE)]
FL_STD_DATA_SPECIES[is.na(REPORTING_QUALITY), .(N = sum(COUNT)), keyby = .(YEAR, FLEET_CODE, GEAR_CODE)]
FL_STD_DATA_SPECIES[is.na(REPORTING_QUALITY), .(N = sum(FISH_COUNT)), keyby = .(YEAR, FLEET_CODE, GEAR_CODE)]
popo = FL_STD_DATA_SPECIES[is.na(REPORTING_QUALITY), .(N = sum(FISH_COUNT)), keyby = .(YEAR, FLEET_CODE, GEAR_CODE)]
popo[, .N, .(GEAR_CODE)]
popo[, .N, keyby = .(GEAR_CODE)]
popo[, .(N = sum(FISH_COUNT)), keyby = .(GEAR_CODE)]
popo[, .(N = sum(N)), keyby = .(GEAR_CODE)]
popo[, .(N = sum(N)), keyby = .(GEAR_CODE)][order(-N)]
popo = FL_STD_DATA_SPECIES[is.na(REPORTING_QUALITY) & !GEAR_CODE %in% c("LLOB", "ELLOB", "FLLOB", "PSOB"), .(N = sum(FISH_COUNT)), keyby = .(YEAR, FLEET_CODE, GEAR_CODE)]
popo
popo[order(-N)]
# EUREU and EUMYT HATR fisheries
FL_REUMYT_HAND = STD_SF_YFT[FLEET_CODE %in% c("EUREU") & GEAR_CODE %in% c("HAND"), .(N = sum(FISH_COUNT)), keyby = .(YEAR, CLASS_LOW, CLASS_HIGH)]
# EUREU and EUMYT HATR fisheries
FL_REUMYT_HAND = FL_STD_DATA_SPECIES[FLEET_CODE %in% c("EUREU") & GEAR_CODE %in% c("HAND"), .(N = sum(FISH_COUNT)), keyby = .(YEAR, CLASS_LOW, CLASS_HIGH)]
FL_REU_HAND[, CLASS_MID := (CLASS_LOW + CLASS_HIGH)/2]
# EUREU and EUMYT HATR fisheries
FL_REU_HAND = FL_STD_DATA_SPECIES[FLEET_CODE %in% c("EUREU") & GEAR_CODE %in% c("HAND"), .(N = sum(FISH_COUNT)), keyby = .(YEAR, CLASS_LOW, CLASS_HIGH)]
FL_REU_HAND[, CLASS_MID := (CLASS_LOW + CLASS_HIGH)/2]
ggplot(FL_REU_HAND, aes(x = CLASS_MID, y = N)) +
geom_line(linewidth = 1) +
xlab("Fork length (cm)") + ylab("% of samples") +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size=10),
strip.text.x = element_text(size = 10),
plot.margin = margin(.2, .3, .1, 0, "cm"),
legend.position = "none",
legend.title = element_blank()) +
coord_cartesian(xlim = c(50, 200)) +
theme(strip.background = element_rect(fill = "white")) +
facet_wrap(~YEAR, scales = "free_y")
# TWN gillnet fisheries
FL_TWN_GILL = FL_STD_DATA_SPECIES[FLEET_CODE %in% c("TWN") & GEAR_CODE %in% c("GILL"), .(N = sum(FISH_COUNT)), keyby = .(YEAR, CLASS_LOW, CLASS_HIGH)]
FL_TWN_GILL[, CLASS_MID := (CLASS_LOW + CLASS_HIGH)/2]
ggplot(FL_TWN_GILL, aes(x = CLASS_MID, y = N)) +
geom_line(linewidth = 1) +
xlab("Fork length (cm)") + ylab("% of samples") +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
axis.title.y = element_text(size=10),
strip.text.x = element_text(size = 10),
plot.margin = margin(.2, .3, .1, 0, "cm"),
legend.position = "none",
legend.title = element_blank()) +
coord_cartesian(xlim = c(50, 200)) +
theme(strip.background = element_rect(fill = "white")) +
facet_wrap(~YEAR, scales = "free_y")
FL_STD_DATA_SPECIES[1]
# Map legacy IOTDB codes to new codes
LEGACY_NEW_IRREGULAR_AREAS_MAPPING = fread("../inputs/mappings/MAPPING_SF_IRREGULAR_AREAS_IOTDB_MASTER.csv", colClasses = c("character", "character"))
# Extract the raw size data
SF_RAW_DATA_SPECIES = SF_raw(species_code = CODE_SPECIES_SELECTED)
# Save legacy fishing ground
setnames(SF_RAW_DATA_SPECIES, old = "FISHING_GROUND_CODE", new = "LEGACY_FISHING_GROUND_CODE")
# Update fishing ground codes for non-regular areas (from IOTCStatistics to IOTC_Master)
SF_RAW_DATA_SPECIES = merge(SF_RAW_DATA_SPECIES, LEGACY_NEW_IRREGULAR_AREAS_MAPPING, by.x = "LEGACY_FISHING_GROUND_CODE", by.y = "LEGACY_FISHING_GROUND_CODE", all.x = TRUE)
# Keep regular fishing grounds
SF_RAW_DATA_SPECIES[substring(LEGACY_FISHING_GROUND_CODE, 1, 1) %in% c("5", "6") & is.na(FISHING_GROUND_CODE), FISHING_GROUND_CODE := LEGACY_FISHING_GROUND_CODE]
# Remove legacy fishing grounds
SF_RAW_DATA_SPECIES[, LEGACY_FISHING_GROUND_CODE := NULL]
# Merge with regular grids 1x1 and 5x5 to identify data not consistent with expected reporting
IO_SF_GRID_LIST = query(DB_IOTC_MASTER(), "SELECT DISTINCT CODE, NAME_EN FROM refs_gis.V_IO_GRIDS_CE_SF;")
REG_GRIDS_NOT_IN_IO = unique(merge(SF_RAW_DATA_SPECIES[substring(FISHING_GROUND_CODE, 1, 1) %in% c("5", "6")], IO_SF_GRID_LIST, by.x = "FISHING_GROUND_CODE", by.y = "CODE", all.x = TRUE)[is.na(NAME_EN), .(FISHING_GROUND_CODE)])[order(FISHING_GROUND_CODE)]
# Identify data for these grids
SF_RAW_DATA_SPECIES_NOT_IO = SF_RAW_DATA_SPECIES[FISHING_GROUND_CODE %in% REG_GRIDS_NOT_IN_IO$FISHING_GROUND_CODE]
REG_GRIDS_NOT_IN_IO
# Identify data for these grids
SF_RAW_DATA_SPECIES_NOT_IO = SF_RAW_DATA_SPECIES[FISHING_GROUND_CODE %in% REG_GRIDS_NOT_IN_IO$FISHING_GROUND_CODE]
SF_RAW_DATA_SPECIES_NOT_IO
SF_RAW_DATA_SPECIES_NOT_IO[, .(N = sum(FISH_COUNT)), keyby = .(FLEET_CODE, GEAR_CODE)]
# Remove data reported outside the Indian Ocean
SF_DATA_SPECIES = SF_RAW_DATA_SPECIES[!FISHING_GROUND_CODE %in% REG_GRIDS_NOT_IN_IO$FISHING_GROUND_CODE]
# Standardise the size data
FL_STD_DATA_SPECIES = standardize.SF(SF_DATA_SPECIES)[, .(FLEET_CODE, YEAR, MONTH_START, MONTH_END, FISHING_GROUND_CODE, GEAR_CODE, SCHOOL_TYPE_CODE, SPECIES_CODE, MEASURE_TYPE_CODE, RAISE_CODE, CLASS_LOW, CLASS_HIGH, FISH_COUNT)]
# Trick to aggregate all sex in table
SF_DATA_SPECIES[, SEX_CODE := "UNCL"]
v
standardize.SF
SF_DATA_SPECIES[FLEET_CODE == "SYC" & MEASURE_TYPE_CODE == "FDL"]
SF_DATA_SPECIES[FLEET_CODE == "SYC" & MEASURE_TYPE_CODE == "LDF"]
# Filtering ####
# Remove data reported outside the Indian Ocean
SF_DATA_SPECIES = SF_RAW_DATA_SPECIES[!FISHING_GROUND_CODE %in% REG_GRIDS_NOT_IN_IO$FISHING_GROUND_CODE]
# Standardisation ####
# Standardise the size data
FL_STD_DATA_SPECIES = standardize.SF(SF_DATA_SPECIES)[, .(FLEET_CODE, YEAR, MONTH_START, MONTH_END, FISHING_GROUND_CODE, GEAR_CODE, SCHOOL_TYPE_CODE, SPECIES_CODE, MEASURE_TYPE_CODE, RAISE_CODE, CLASS_LOW, CLASS_HIGH, FISH_COUNT)]
# Trick to aggregate all sex in table
SF_DATA_SPECIES[, SEX_CODE := "UNCL"]
# Standardise and pivot the raw size data
# Sex excluded
FL_STD_DATA_SPECIES_TABLE = standardize_and_pivot_size_frequencies(SF_DATA_SPECIES, keep_sex_and_raise_code = TRUE)[, -c("SEX_CODE", "AVG_WEIGHT")]
# Extract reporting quality
FL_REPORTING_QUALITY_SPECIES = data_quality(species_code = CODE_SPECIES_SELECTED)
# Add reporting quality to the data in wide format
FL_STD_DATA_SPECIES_TABLE = merge(FL_STD_DATA_SPECIES_TABLE, FL_REPORTING_QUALITY_SPECIES[, .(FLEET_CODE, YEAR, GEAR_CODE, SPECIES_CODE, REPORTING_QUALITY = SF)], by.x = c("YEAR", "FLEET_CODE", "GEAR_CODE", "SPECIES_CODE"), by.y = c("YEAR", "FLEET_CODE", "GEAR_CODE", "SPECIES_CODE"), all.x = TRUE)
# Reorder to put RAISE_CODE and REPORTING_QUALITY at the end of the fields
setcolorder(FL_STD_DATA_SPECIES_TABLE, neworder = c("FLEET_CODE", "YEAR", "MONTH_START", "MONTH_END", "FISHING_GROUND_CODE", "GEAR_CODE", "SCHOOL_TYPE_CODE", "SPECIES_CODE", "MEASURE_TYPE_CODE", "FIRST_CLASS_LOW", "SIZE_INTERVAL", "NO_FISH", "KG_FISH", "RAISE_CODE", "REPORTING_QUALITY"))
# Add reporting quality to the data in melted format
FL_STD_DATA_SPECIES = merge(FL_STD_DATA_SPECIES, FL_REPORTING_QUALITY_SPECIES[, .(FLEET_CODE, YEAR, GEAR_CODE, SPECIES_CODE, REPORTING_QUALITY = SF)], by.x = c("YEAR", "FLEET_CODE", "GEAR_CODE", "SPECIES_CODE"), by.y = c("YEAR", "FLEET_CODE", "GEAR_CODE", "SPECIES_CODE"), all.x = TRUE)
# Reorder to put RAISE_CODE and REPORTING_QUALITY at the end of the fields
setcolorder(FL_STD_DATA_SPECIES, neworder = c("FLEET_CODE", "YEAR", "MONTH_START", "MONTH_END", "FISHING_GROUND_CODE", "GEAR_CODE", "SCHOOL_TYPE_CODE", "SPECIES_CODE", "MEASURE_TYPE_CODE", "CLASS_LOW", "CLASS_HIGH", "FISH_COUNT", "RAISE_CODE", "REPORTING_QUALITY"))
FL_STD_DATA_SPECIES[1:2]
SF_DATA_SPECIES[, .(N = sum(FISH_COUNT))]
SF_DATA_SPECIES[, .(N = sum(FISH_COUNT)), keyby = .(MEASURE_TYPE_CODE, MEASURE_TYPE)]
as.Date("2025-04-15") + 100
as.Date("2025-05-01") + 100
NC_est(fleet_codes = "EUITA", fishery_group_codes = "PS")[, .(CATCH = sum(CATCH)), keyby = .(YEAR, FISHING_GROUND_CODE)]
CE_raw(fleet_codes = "EUITA", fishery_group_codes = "PS")[, .(CATCH = sum(CATCH)), keyby = .(YEAR, FISHING_GROUND_CODE)]
CE_raw(fleet_codes = "EUITA", fishery_group_codes = "PS")
NC_est(fleet_codes = "ZAF", fishery_group_codes = "LL")[, .(CATCH = sum(CATCH)), keyby = .(YEAR, FISHERY_CODE)]
NC_est(fleet_codes = "ZAF", fishery_group_codes = "LL", years = 2020:2023)[, .(CATCH = sum(CATCH)), keyby = .(SPECIES_CODE)]
NC_est(fleet_codes = "ZAF", fishery_group_codes = "LL", years = 2020:2023)[, .(CATCH = sum(CATCH)), keyby = .(SPECIES_CODE)][order(-CATCH)]
NC_est(fleet_codes = "ZAF", fishery_group_codes = "LL", years = 1997:2013)[, .(CATCH = sum(CATCH)), keyby = .(FISHERY_CODE)][order(-CATCH)]
NC_est(fleet_codes = "ZAF", fishery_group_codes = "LL", years = 1997:2013)[, .(CATCH = sum(CATCH)), keyby = .(SPECIES_CODE)][order(-CATCH)]
NC_est(fleet_codes = "TWN", fishery_group_codes = "LL", years = 1997:2013)[, .(CATCH = sum(CATCH)), keyby = .(SPECIES_CODE)][order(-CATCH)]
NC_est(fleet_codes = "TWN", fishery_group_codes = "LL", years = 1997:2013)[FISHERY_CODE == "LLO", .(CATCH = sum(CATCH)), keyby = .(SPECIES_CODE)][order(-CATCH)]
NC_est(fleet_codes = "EUREU", fishery_group_codes = "LL", years = 1997:2013)[, .(CATCH = sum(CATCH)), keyby = .(SPECIES_CODE)][order(-CATCH)]
